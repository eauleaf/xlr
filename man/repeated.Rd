% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/repeated.R
\name{repeated}
\alias{repeated}
\title{Flag all values in a vector that occur more than once.}
\usage{
repeated(x, incomparables = FALSE, ...)
}
\arguments{
\item{x}{a vector}

\item{incomparables}{a vector of values that cannot be compared. FALSE is a
special value, meaning that all values can be compared, and
may be the only value accepted for methods other than the default; values
are coerced internally to be the same type as x.}

\item{...}{passed to \code{\link[=duplicated]{duplicated()}}}
}
\value{
a logical vector the same length as the input
}
\description{
Useful for reviewing datasets with where there should be unique
values. It is similar to \code{\link[=duplicated]{duplicated()}}, but marks all repeated values as
TRUE rather than just the second observation and thereafter.

Treats NaN, Inf, and NA like any other value. \code{repeated(c(NULL, NULL, NULL, NaN, Inf, NA, NA))} returns \code{c(FALSE, FALSE, TRUE, TRUE)}
}
\details{
A convenience function to use with dplyr::filter() to make it easy
to identify and review all repeated observations in a dataframe. The function
is an alias for \code{x \%in\% x[duplicated(x)]}.

Filtering a dataframe by the repeated values in column 'x', as in
\code{dplyr::filter(.data, repeated(x))}, performs the same task as grouping by a
variable and selecting counts greater than 1, as in \code{dplyr::group_by(.data, x)  |> dplyr::filter(dplyr::n()>1)}, but is quicker and easier to remember.

(Ideally \code{\link[=repeated]{repeated()}} would be written in c++ and included in \link{dplyr}.)
}
\examples{
repeated(c(1, 2, 3, 4, 5, 5, 5))
repeated(c('A','A','B','C',5,5), incomparables = c('A'))
c(NA, NA, '', NULL, NULL, NULL) |> repeated()

# Find all cars where 'qsec' is the same as another car's:
mtcars |> dplyr::filter(repeated(qsec))

# For clarity, compare repeated() output to duplicated() output:
mtcars |> dplyr::filter(repeated(wt))
mtcars |> dplyr::filter(duplicated(wt))

# To use dplyr::filter() on several variables, put a `,` for 'and',
#  and use `|` for an 'or' statement, as in:
mtcars |> dplyr::filter(repeated(qsec), repeated(wt))
mtcars |> dplyr::filter(repeated(qsec) | repeated(wt))

}
