% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xl.R
\name{xl}
\alias{xl}
\title{View an R data objects in a Libreoffice or Excel workbook}
\usage{
xl(
  ...,
  .path = NULL,
  .open = TRUE,
  .quiet = TRUE,
  .sheet_titles = stringr::str_to_title,
  .dataframe_spec = NULL,
  .tabname_spec = list(sep = ".", pad = ".", name_spec = "{inner}"),
  .workbook_spec = list(asTable = FALSE, zoom = 85, withFilter = TRUE),
  .return = list("workbook", "savepath", "tibbles", "boolean", "all")
)
}
\arguments{
\item{...}{A dataframe, list of dataframes, or inputs coercible to one
or more dataframes.}

\item{.path}{Optional path to save a copy of the workbook output. Uses
\code{\link[here:here]{here::here()}} for savepath completion. If \code{.path} does not end in '.xlsx',
automatically adds the suffix. If \code{.path} is not specified, workbook is
saved only momentarily in an auto-named temp file. Always creates the specified
directory location.}

\item{.open}{If \code{FALSE}, workbook will not open after being written.}

\item{.quiet}{If \code{FALSE}, echoes function messages.}

\item{.sheet_titles}{\code{NULL}, a character vector the same length as the number of
spreadsheets, or a purrr-style function or formula to apply to the default input names.
The default is function: \code{\link[stringr:case]{stringr::str_to_title()}}.}

\item{.dataframe_spec}{\code{NULL} (default), or a purrr-style function to apply
across all dataframes; e.g. \verb{~janitor::clean_names(., case = 'title'))} or
\code{janitor::clean_names} to titlecase or snakecase fieldnames.}

\item{.tabname_spec}{a list that allows the user to define tab labeling
arguments: sep = ".", pad = ".", and name_spec = "{inner}"}

\item{.workbook_spec}{a list of arguments to pass to
\code{\link[openxlsx:buildWorkbook]{openxlsx::buildWorkbook()}}, e.g. \code{list(asTable = TRUE, orientation = 'landscape', zoom = 100, startRow = 7)}}

\item{.return}{return (invisibly) one of 'workbook' (default), 'savepath',
'tibbles', or 'boolean' for workbook write success/failure. If 'all' returns
all possibilities in a named list.}
}
\value{
The side-effect, a workbook of spreadsheets, is the primary output of this function.
The direct-return output is determined by the input parameter \code{.return} denoting
whether to return the \code{openxlsx} workbook-object, the list of input data cast as
tibbles, or the save path. Any output is returned invisibly.
}
\description{
Provides an output of datasets to view through the user's default spreadsheet
program.
}
\details{
If you use quick keys, the function \code{\link[=set_xlr_key_chords]{set_xlr_key_chords()}} will assign
\code{ctrl + alt + shift + l} to the function \code{xl()}. The quick keys allow you to
open a spreadsheet by highlighting an expression or variable within an RStudio
text editor, and then pressing all 3 control keys \code{ctrl + alt + shift} as well
as the letter \code{L} to 'launch' a spreadsheet.
}
\examples{
\dontrun{
xl('hi')
xl(mtcars, iris)
xl(iris, iris)
xl(mtcars, iris, .workbook_spec = list(asTable = FALSE, orientation = 'landscape', name = NULL))
xl(mtcars, .sheet_titles = NULL)
iris |> split(f = iris$Species) |> xl(.workbook_spec = list(startRow = c(6,4,2), zoom = 110))
iris |> split(f = iris$Species) |> xl(.sheet_titles=c('SMALL',NA,'LARGE'))
dplyr::starwars |> xl()
dplyr::starwars |> split(f = dplyr::starwars$eye_color) |> xl(.sheet_titles = toupper)
}

}
\seealso{
\code{\link[openxlsx:buildWorkbook]{openxlsx::buildWorkbook()}}
}
