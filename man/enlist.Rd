% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/enlist.R
\name{enlist}
\alias{enlist}
\title{Make a list with auto-named list elements}
\usage{
enlist(..., .label = NULL)
}
\arguments{
\item{...}{data objects; if unnamed, enlist() forces names by input expression}

\item{.label}{a function or character vector to rename list elements, e.g. .label = ~substr(.,1,5).
\code{.label} is passed to \code{nm} in 'rlang::set_names()'}
}
\value{
a named list
}
\description{
When passed a list, \code{enlist()} does not add an additional list layer.
Use in place of \link{list} to produce a list with auto-assigned names and to
avoid adding list structure.
}
\details{
\itemize{
\item \code{enlist} creates a list where each input list element is force-named by the assigned name or input expression, .e.g  \code{enlist(mtcars)}.
\item If no list exists, \code{enlist} places its arguments into a list, e.g. \code{enlist(c('hi', 'hello'))}.
\item If passed a single bare list, \code{enlist} does not add an additional list layer.
That is, enlist() doesn't stack lists for structure's sake alone, e.g. \code{enlist(enlist(letters))}.
In this dis-embedding case, a user provided name passed with \code{=}, like \code{enlist(some_name = list('hi'))}, may be discarded.
\item Handles dots, splicing, and injection, e.g. enlist(!!!letters).
\item Ignores input argument separator commas, e.g. enlist(,,'hi',,,).
\item Naming the output can be performed by function through the parameter \code{.label}, e.g. enlist('me', .label = ~paste0('name_',.))
}
}
\examples{
# Examples compare `enlist()` to `list()`:

# Auto-naming by input expression:
enlist(head(iris), tail(mtcars))
list(head(iris), tail(mtcars))

# Naming a list element works similar to `list()`:
enlist(some_name = letters)
list(some_name = letters)

# Naming by passing a function to `.label`:
enlist(letters, .label =  'some_name')
enlist(letters, .label =  ~paste0(.,'_1'))
enlist('black','white','cyan', .label =  'color_grp_1')
enlist(letters, .label =  ~'')  # removes names


# List embedding:
enlist(enlist(enlist(letters))) # 1 list deep
list(list(list(letters))) # 3 lists deep

list(letters, b = enlist(a = letters, 'blue')) |> enlist()

# Handles non-standard evaluation:
candy <- list('lollipops','gum')
enlist(candy, !!!candy)

}
