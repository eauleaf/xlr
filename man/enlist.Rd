% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/enlist.R
\name{enlist}
\alias{enlist}
\title{Create a list with auto-named list elements}
\usage{
enlist(..., .label = NULL)
}
\arguments{
\item{...}{data objects; if unnamed, enlist() forces names by input expression}

\item{.label}{a function or character vector to rename list elements, e.g. .label = ~substr(.,1,5).
\code{.label} is passed to \code{nm} in 'rlang::set_names()'}
}
\value{
a named list
}
\description{
When passed a list, \code{enlist()} does not add an additional list layer.
Use in place of \link{list} to produce a list with auto-assigned names and to avoid adding excess list structure.
}
\details{
Specifically:
-- \code{enlist} creates a list where each list element is force-named by the input expression if no list element name is available, .e.g  \code{enlist(mtcars)}.

-- If no list exists, \code{enlist} places its arguments into a list, e.g. \code{enlist(c('hi', 'hello'))}.

-- If passed a single bare list, \code{enlist} does not add an additional list layer. That is, enlist() doesn't stack lists for structure's sake alone, e.g. \code{enlist(enlist(letters))}.

-- \code{enlist} takes dots, splicing, and injection, and is okay to use in non-standard evaluation or meta-programming, e.g. enlist(!!!letters).

-- \code{enlist} ignores input argument separator commas, e.g. enlist(,,,,,).

-- Naming can be performed by function through the parameter \code{.label}, e.g. enlist('me', .label = ~paste0('name_',.))
}
\examples{
# Examples compare `enlist()` to `list()`:

# Auto-naming by input expression:
enlist(head(iris), tail(mtcars))
list(head(iris), tail(mtcars))

# Naming a list element works similar to `list()`:
enlist(some_name = letters)
list(some_name = letters)

# Naming by passing a function to `.label`:
enlist(letters, .label =  'some_name')
enlist(letters, .label =  ~paste0(.,'_1'))
enlist('black','white','cyan', .label =  'color_grp_1')
enlist(letters, .label =  ~'')  # removes names


# List embedding:
list(list(list(letters))) # 3 lists deep
enlist(enlist(enlist(letters))) # 1 list deep

# This dis-embedding behavior can be useful in a function when the dots `...` can be arguments or a list of arguments.

# Handles non-standard evaluation:
candy <- list('lollipops','gum')
enlist(candy, !!!candy)

}
