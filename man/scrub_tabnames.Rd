% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scrub_tabnames.R
\name{scrub_tabnames}
\alias{scrub_tabnames}
\title{Conform names to spreadsheet workbook standards}
\usage{
scrub_tabnames(
  tabnames,
  max_width = 31,
  truncate_side = c("right", "left", "center"),
  paste_side = c("right", "left"),
  sep = ".",
  pad = ".",
  quiet = FALSE
)
}
\arguments{
\item{tabnames}{strings: character vector of names}

\item{max_width}{integerish between 0 and 31: Default is 31 characters;
longer names will cause Excel export to fail.}

\item{truncate_side}{'right', 'left', or 'center': describes which side of a
long tabname do you want to snip excess characters from}

\item{paste_side}{'right' or 'left': describing which side of a tab name you
want to paste characters to, if required}

\item{sep}{chars: if pasting characters to a tab name, what character do you
want to use to separate name and unique prefix/suffix; can be several
characters like '...', but cannot be any of the forbidden characters
described in \code{details}}

\item{pad}{char: if pasting characters to a tab name, what character do you
want to use to pad so numbers align, (e.g. '0' for '001' or '.' for '..1'
if 3 digits of differentiation are necessary). Must be at least 1 character
but no longer. Can be a space ' ', but cannot be any of the forbidden characters
described in \code{details}}

\item{quiet}{bool: to turn off warnings if you prefer with quiet = TRUE}
}
\value{
a character vector of names suitable for Excel or Librecalc tab/sheet
names
}
\description{
\code{scrub_tabnames()} preserves as much of the original
tabnames as possible while ensuring each tabname is unique and contains only
characters permissible as spreadsheet tab names
}
\details{
Replaces:
\itemize{
\item characters: /\: with: -
\item characters: ?*&$ with: #
\item characters: [< with: (
\item characters: ]> with: )
\item tabnames with the single quote or double quote: ' or " with a backtick `
\item the word 'history' in a tabname, with 'hist' while preserving capitalization
\item names greater than 31 characters with a truncated characters
\item duplicate sheetnames with numbered versions of the name to make each name within that group unique
}
}
\examples{
scrub_tabnames(1:5)
c('\\\\:blue/:', 'red', 'gr?*een///////', '[]', '[orange]','', NA) |> scrub_tabnames()
c('history', NA, 'HISTORY', 'Entire History of the Universe',NULL,NULL) |> scrub_tabnames()
c("'\'don't worry\''", '`NA`', NA, "'HIS'T''", 'Entire History of \'the\' \'Universe\'') |> scrub_tabnames()
c('\\\\/:[]?*', '\\\\?:*/[]', '~!@#$\%^&()-_=+{}|;:,<.> ') |> scrub_tabnames()
paste0(names(datasets::precip),'/',datasets::precip) |> scrub_tabnames(max_width = 10)
paste0(names(datasets::precip),'/',datasets::precip) |> scrub_tabnames(max_width = 8, sep = '_#', pad = '0')
paste0(names(datasets::precip),'/',datasets::precip) |> scrub_tabnames(max_width = 0, sep = '...', pad = '0')
paste0(names(datasets::precip),'/',datasets::precip) |> scrub_tabnames(max_width = 0, sep = '..', pad = '.')
rep('', 15) |> scrub_tabnames(max_width = 0, sep = '..', pad = '.')
# rep('', 15) |> scrub_tabnames(max_width = 0, sep = '', pad = '') # expect_fail
# rep('', 15) |> scrub_tabnames(max_width = 0, sep = '', pad = ' ') # expect_fail
# dplyr::starwars |> dplyr::mutate(new_name = paste(name,'of', homeworld)) |>
# dplyr::pull(new_name) |> scrub_tabnames(max_width = 20, sep = '//', pad = ']') # expect_fail
# dplyr::starwars |> dplyr::mutate(new_name = paste(name,'of', homeworld)) |>
# dplyr::pull(new_name) |> scrub_tabnames(max_width = 0, sep = '.', pad = '.') # expect_fail

# when stringr::str_trunc() gets fixed, the below code will work.
# dplyr::starwars |> dplyr::mutate(new_name = paste(name,'of', homeworld)) |>
# dplyr::pull(new_name) |> scrub_tabnames(max_width = 0, sep = '', pad = '.') # ??????

# if you request a width of characters that is fewer than your replacement characters, you get some weird looking names:
dplyr::starwars |> dplyr::mutate(new_name = paste(name,'of', homeworld)) |>
dplyr::pull(new_name) |> scrub_tabnames(max_width = 2, sep = '...', pad = '.')

# However, if you call zero width..., that's useful for naming.
dplyr::starwars |> dplyr::mutate(new_name = paste(name,'of', homeworld)) |>
dplyr::pull(new_name) |> scrub_tabnames(max_width = 0)
dplyr::starwars |> dplyr::mutate(new_name = paste(name,'of', homeworld)) |>
dplyr::pull(new_name) |> scrub_tabnames(max_width = 0, sep = 'tab > ', pad = '0')
dplyr::starwars |> dplyr::mutate(new_name = paste(name,'of', homeworld)) |>
dplyr::pull(new_name) |> scrub_tabnames(max_width = 0,truncate_side = 'center')
}
\references{
\itemize{
\item \url{https://help.libreoffice.org/latest/he/text/scalc/guide/rename_table.html}
\item \url{https://support.microsoft.com/en-us/office/rename-a-worksheet-3f1f7148-ee83-404d-8ef0-9ff99fbad1f9}
\item \url{https://colinfay.me/writing-r-extensions/creating-r-packages.html}
}
}
