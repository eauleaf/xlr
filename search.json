[{"path":"https://eauleaf.github.io/xlr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 xlr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"r-spreadsheets","dir":"Articles","previous_headings":"","what":"R + Spreadsheets","title":"xlr","text":"package somewhere dev beta. — Testing feedback helpful —","code":""},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview:","title":"xlr","text":"Spreadsheets great tool presenting 2-dimensional data reader-friendly format still workhorse business community, spreadsheets don’t data processing power R, common data professionals work spreadsheets R. However, working tools can frustrating. ’s time expensive read data back forth two, typically, want data processing R send series decent-looking tables workbook. xlr effort reduce friction comes needing work spreadsheets R.","code":""},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions:","title":"xlr","text":"xl() – output list datasets named spreadsheets workbook paste_from_xl() – format R OS file/folder names spreadsheet data copied clipboard memory enscript() – produce code re-create R object repeated() – flag repeated observations vector sys_open() – request OS open files, folders, URLs enlist() – auto-name elements catch lists without additional list nesting copy_for_xl() – copy R dataset clipboard memory format pasting spreadsheet list_iron() – flatten lists embedded lists single-file list named objects entibble() – create tibbles convenient default behavior spreadsheet presentation","code":""},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"details-and-examples","dir":"Articles","previous_headings":"","what":"Details and Examples:","title":"xlr","text":"","code":"# Install remotes::install_github('eauleaf/xlr', build_vignettes = TRUE) library(xlr)"},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"xl","dir":"Articles","previous_headings":"","what":"xl()","title":"xlr","text":"xl() primary function package, many functions around help . function somewhat similar View() utils package xl() auto-naming quickly viewing datasets. ’s easiest see xl() passing example data; try sending couple pre-loaded datasets, like: type code R console, get workbook pops open datasets presented standardized, formatted spreadsheets. ’re done workbook, just close ; spreadsheets temporary. Close , ’re gone. video xl() creating temporary workbook data object becomes labeled spreadsheet workbook. xl(iris, mtcars, 1:100, dplyr::starwars) use xl(), pass dataframe list dataframes. matter pass lists nested lists structured data objects buried somewhere. xl() recursively flattens list auto-names data objects become spreadsheets workbook. fact, nested lists can useful naming groups within spreadsheet tabs provide sheet-naming specification xl() like .tabname_spec = list(name_spec = \"{outer}|{inner}\"). Try running examples console. xl() writes workbooks temp directory , keep workbooks building , uses later::later() remove temp savefile 5 minutes write time. Temp directories also delete close R. , however, want save workbook, specify path just save name xl() input parameter .path. Specifying savename signals xl() mark file cleanup. example, xl(iris, .path = 'flower_data') save data flower_data.xlsx within working directory. (.path uses ::() internally.) xl() creates tibbles datasets pass , specified user parameter .return, optionally returns (always invisibly) openxlsx workbook object (default), data objects list, workbook savepath string, list.","code":"xl(mtcars, iris, letters, AirPassengers, Titanic) your_datasets <- enlist(flowers = iris, mtcars, datasets::USArrests)  xl(your_datasets)   xl(your_datasets, .tabname_spec = list(name_spec = \"{outer}|{inner}\"))   iris |> splitter(Species) |> xl()  iris |> splitter(Species) |> xl(your_datasets)"},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"paste_from_xl","dir":"Articles","previous_headings":"","what":"paste_from_xl()","title":"xlr","text":"paste_from_xl() pastes data clipboard memory tibble object R. can pass spreadsheet data R copying data spreadsheet, type following console: function guesses whether field names present, function guessed wrong, can specify parameter has_fieldnames, like :","code":"my_data <- paste_from_xl() my_data <- paste_from_xl(has_fieldnames = TRUE)"},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"the-paste_from_xl-key-chord","dir":"Articles","previous_headings":"paste_from_xl()","what":"The paste_from_xl() key-chord:","title":"xlr","text":"However, better method pasting use quick keys ctrl + alt + shift+ v. use key-chord, run function set_xlr_key_chords(). (set quick keys, run function RStudio, close RStudio re-open new quick keys active.) : Copy data spreadsheet. Click RStudio console RStudio editor. (console editor different paste_from_xl() functionality.) Press ctrl + alt + shift + v together paste. (Just like pasting ctrl + v, using 3 control keys, plus v.) see tibble spreadsheet data assigned variable dataset echoed console. However, pressed ctrl + alt + shift + v, editor window instead console, also get formatted code written editor window recreates data object script. script formatted version R’s deparsed internal data representation. video example copying spreadsheet data using key-chord ctrl + alt + shift + v RStudio. ctrl + alt + shift + v","code":""},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"copy-paths-using-paste_from_xl","dir":"Articles","previous_headings":"paste_from_xl()","what":"Copy paths using paste_from_xl():","title":"xlr","text":"addition spreadsheet data, can copy file paths paste_from_xl(). Open file navigation window operating system, highlight files folders, press ctrl + c; go back RStudio, click editor window, press key-chord ctrl + alt + shift + v, get enscripted vector file paths pasted text editor.  video example copying file paths file window using key-chord ctrl + alt + shift + v RStudio. ctrl + alt + shift + v","code":""},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"enscript","dir":"Articles","previous_headings":"","what":"enscript()","title":"xlr","text":"often manually process data particular information ’s small deal saving retrieving serialized file database. Instead, just want save processed dataset text within script, hate manually recreating object. object variable, want variable’s data deparsed formatted script, pass variable enscript(), : enscript() copies formatted code clipboard reproduce variable’s internal R object. example video enscript(): enscript(enlist(‘hi’, ‘bye’, head(iris,3))) Try running something like: can pass expression single variable piping ‘enscript()’ end anything, using quick keys. Enscript(), key-chord, extremely useful creating unit tests package test files.","code":"enscript(head(mtcars)) iris |> splitter(Species) |> purrr::map(head, 2) |> enscript()"},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"the-enscript-key-chord","dir":"Articles","previous_headings":"enscript()","what":"The enscript() key-chord:","title":"xlr","text":"’s convenient use quick keys enscript(), ctrl + alt + shift + n. (remember key-chord three control keys, plus n, sounds short ‘enscript’.) use enscript() quick keys, Run quick-key setup set_xlr_key_chords() haven’t already. : Type variable name like mtcars RStudio editor window (console). Use cursor highlight word mtcars. Press ctrl + alt + shift + n together. see success message, ✔ Script copied clipboard:, written console deparsed object echoed . can now paste formatted script editor window console ctrl + v. Note enscript() quick keys work highlighted variable highlighted expression RStudio editor window; quick keys interpret anything highlighted console.","code":""},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"repeated","dir":"Articles","previous_headings":"","what":"repeated()","title":"xlr","text":"repeated() helps filter dataframe identical observations. probably dplyr, ’s xlr ’s dplyr. use understand duplication errors. Use like : repeated() just x %% x[duplicated(x)] assertion checks, way easier remember x %% x[duplicated(x)]. Use statements like :","code":"mtcars |> dplyr::filter(repeated(disp)) #>                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360        14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 280          19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C         17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE        16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL        17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC       15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 # AND statements mtcars |> dplyr::filter(repeated(hp), repeated(disp)) # OR statements mtcars |> dplyr::filter(repeated(hp) | repeated(disp))"},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"sys_open","dir":"Articles","previous_headings":"","what":"sys_open()","title":"xlr","text":"sys_open() opens .xlsx files, also opens file, folder, URL since function requests operating system open provided input locations via operating system’s command-line interface. function passes path string (many, like) OS, asking OS open location using default application. reason use instead functions ’ve better luck getting files open requesting operating system make decisions open file. Try running sys_open() without inputs. pop open navigation pane working directory. aren’t able open file sys_open(), , using operating system’s navigation window, right-click file make sure operating system default application assigned file type; , double-click file make sure opens specified default application. video example opening PDF files piping paste_from_xl() sys_open(). sys_open(paste_from_xl())","code":"sys_open()"},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"enlist","dir":"Articles","previous_headings":"","what":"enlist()","title":"xlr","text":"enlist() quick list-naming. function produces named lists, without list-nesting passed single bare list. , unlike list(), enlist() removes embedded list layer user passes single list. instance, compare structure naming created enlist: structure naming created list: enlist() example one list deep, whereas `list() three lists deep. However, send two list objects enlist, shown example , enlist choice wrap new list.","code":"enlist(enlist(enlist('hello'))) |> str() #> List of 1 #>  $ enlist(enlist(\"hello\")): chr \"hello\" list(list(list('hello'))) |> str() #> List of 1 #>  $ :List of 1 #>   ..$ :List of 1 #>   .. ..$ : chr \"hello\" enlist(list(letters), list(letters)) |> str() #> List of 2 #>  $ list(letters):List of 1 #>   ..$ : chr [1:26] \"a\" \"b\" \"c\" \"d\" ... #>  $ list(letters):List of 1 #>   ..$ : chr [1:26] \"a\" \"b\" \"c\" \"d\" ..."},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"a-few-additional-notes-about-enlist","dir":"Articles","previous_headings":"enlist()","what":"A few additional notes about enlist():","title":"xlr","text":"Naming permissive, can duplicate names list, careful indexing name since R returns first equivalently named observation list. enlist() input parameter .label, takes naming function. Internally, .label passed nm rlang::set_names() takes inputs. example: enlist('hi','hello', .label = ~paste0(.,'_',1:2)). enlist() supports non-standard evaluation, e.g. enlist(!!!letters). Ignores empty inputs, e.g. enlist(,,'hi',,).","code":""},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"some-clipboard-prep-notes","dir":"Articles","previous_headings":"enlist()","what":"Some clipboard prep notes:","title":"xlr","text":"next 3 xlr functions, use clipboard memory. use clipboard, install clipr package check package works running clipr::dr_clipr(). Also, using Linux, like , make sure install clipboard tool via terminal, e.g. sudo apt-get install xclip.","code":""},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"copy_for_xl","dir":"Articles","previous_headings":"","what":"copy_for_xl()","title":"xlr","text":"copy_for_xl() copies data clipboard memory ’s formatted pasting cells spreadsheet. can pass data object , like:","code":"copy_for_xl(mtcars)"},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"the-copy_for_xl-key-chord","dir":"Articles","previous_headings":"copy_for_xl()","what":"The copy_for_xl() key-chord:","title":"xlr","text":"However, better copying method use quick keys ctrl + alt + shift + c. haven’t already done , run function, set_xlr_key_chords() use quick keys. : Type mtcars RStudio text editor window (console window) Use cursor highlight word mtcars, Press ctrl + alt + shift + c together. (’s just like copying ctrl + c, instead use 3 control keys, plus c.) see ✔ Table copied clipboard: written console. Open spreadsheet paste copied mtcars data . video example uses copy_for_xl(), via console, copy starwars data. copy_for_xl(dplyr::starwars)","code":""},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"list_iron","dir":"Articles","previous_headings":"","what":"list_iron()","title":"xlr","text":"list_iron() takes nested list lists irons input get single-file list objects. ‘.xlsx’ workbook can make spreadsheets simple, flat list data objects, list_iron() recursively smooshes additional list structure input. list_iron() also convenience features naming list objects applying function . example, consider ridiculously embedded list structure list_iron’s simplification : Notice auto-naming list items , .e. “ridiculous|car_data”, “ridiculous|flower_data”. Control naming name_spec name_repair. can also apply function, parameter .f, flattening leaves lists , shown :","code":"ridiculous <- list(list(car_data = mtcars, list(list(flower_data = iris))))  # Original list depth ridiculous |> str() #> List of 1 #>  $ :List of 2 #>   ..$ car_data:'data.frame': 32 obs. of  11 variables: #>   .. ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #>   .. ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ... #>   .. ..$ disp: num [1:32] 160 160 108 258 360 ... #>   .. ..$ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ... #>   .. ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... #>   .. ..$ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ... #>   .. ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ... #>   .. ..$ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ... #>   .. ..$ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ... #>   .. ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ... #>   .. ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ... #>   ..$         :List of 1 #>   .. ..$ :List of 1 #>   .. .. ..$ flower_data:'data.frame':    150 obs. of  5 variables: #>   .. .. .. ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>   .. .. .. ..$ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>   .. .. .. ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>   .. .. .. ..$ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>   .. .. .. ..$ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...  # Ironed list depth ridiculous |> list_iron() |> str() #> List of 2 #>  $ ridiculous|car_data   :'data.frame':  32 obs. of  11 variables: #>   ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #>   ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ... #>   ..$ disp: num [1:32] 160 160 108 258 360 ... #>   ..$ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ... #>   ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... #>   ..$ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ... #>   ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ... #>   ..$ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ... #>   ..$ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ... #>   ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ... #>   ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ... #>  $ ridiculous|flower_data:'data.frame':  150 obs. of  5 variables: #>   ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... #>   ..$ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... #>   ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... #>   ..$ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... #>   ..$ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ... list_iron(ridiculous, .f = ~tail(.,2)) #> $`ridiculous|car_data` #>                mpg cyl disp  hp drat   wt qsec vs am gear carb #> Maserati Bora 15.0   8  301 335 3.54 3.57 14.6  0  1    5    8 #> Volvo 142E    21.4   4  121 109 4.11 2.78 18.6  1  1    4    2 #>  #> $`ridiculous|flower_data` #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 149          6.2         3.4          5.4         2.3 virginica #> 150          5.9         3.0          5.1         1.8 virginica"},{"path":"https://eauleaf.github.io/xlr/articles/xlr.html","id":"entibble","dir":"Articles","previous_headings":"","what":"entibble()","title":"xlr","text":"entibble() makes tibble defaults useful spreadsheets. Defaults include: automatically presenting rownames, exist, first column tibble repeating input elements obtain common lengths producing dataframe treating list data inputs equivalent comma-separated data inputs instance, compare tibbled entibbled data .","code":"alpha <- rlang::set_names(letters, LETTERS)  # rownames are forced in so they show up in spreadsheets entibble(alpha) |> head(2) #> # A tibble: 2 × 2 #>   rowname alpha #>   <chr>   <chr> #> 1 A       a     #> 2 B       b tibble::tibble(alpha) |> head(2) #> # A tibble: 2 × 1 #>   alpha #>   <chr> #> 1 a     #> 2 b  # lists passed to entibble are dumped and their objects joined like comma-separated  # inputs if the listed objects have compatible row dimensions entibble(list(alpha, letters)) |> tail(2) #> # A tibble: 2 × 3 #>   rowname alpha letters #>   <chr>   <chr> <chr>   #> 1 Y       y     y       #> 2 Z       z     z  # compare the above to `tibble()` tibble::tibble(list(alpha, letters)) |> tail(2) #> # A tibble: 2 × 1 #>   `list(alpha, letters)` #>   <list>                 #> 1 <chr [26]>             #> 2 <chr [26]>"},{"path":"https://eauleaf.github.io/xlr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eauleaf. Author, maintainer.","code":""},{"path":"https://eauleaf.github.io/xlr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eauleaf (2023). xlr: Tools working Excel/Libreoffice R. R package version 0.0.0.9053, https://github.com/eauleaf/xlr, https://rpubs.com/Eauleaf/xlr, https://eauleaf.github.io/xlr/.","code":"@Manual{,   title = {xlr: Tools for working between Excel/Libreoffice and R},   author = {{Eauleaf}},   year = {2023},   note = {R package version 0.0.0.9053, https://github.com/eauleaf/xlr, https://rpubs.com/Eauleaf/xlr},   url = {https://eauleaf.github.io/xlr/}, }"},{"path":"https://eauleaf.github.io/xlr/index.html","id":"xlr","dir":"","previous_headings":"","what":"Tools for working between Excel/Libreoffice and R","title":"Tools for working between Excel/Libreoffice and R","text":"set tools help data scientists work interactively R spreadsheets.","code":""},{"path":"https://eauleaf.github.io/xlr/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"Tools for working between Excel/Libreoffice and R","text":"","code":"# install.packages(\"remotes\") remotes::install_github('eauleaf/xlr', build_vignettes = TRUE) library(xlr)"},{"path":"https://eauleaf.github.io/xlr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tools for working between Excel/Libreoffice and R","text":"","code":"# Send R data to workbook iris |> splitter(Species) |> xl()"},{"path":"https://eauleaf.github.io/xlr/index.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"Tools for working between Excel/Libreoffice and R","text":"several xlr functions require interactive use, user testing issue reporting helpful.","code":""},{"path":"https://eauleaf.github.io/xlr/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Tools for working between Excel/Libreoffice and R","text":"xlr taken hundreds hours write, test, re-write. hope makes work easier. find helpful, please consider paying forward supporting Ukraine’s future: https://u24.gov.ua/","code":""},{"path":"https://eauleaf.github.io/xlr/reference/copy_for_xl.html","id":null,"dir":"Reference","previous_headings":"","what":"Copies R data to your clipboard — copy_for_xl","title":"Copies R data to your clipboard — copy_for_xl","text":"format copied data tab-delimited pasting spreadsheet. 2 ways pass data function: Type function. Highlight data object RStudio text editor press key-chord: ctrl + alt + shift + c. (Use quick keys just like use ctrl + c copying, except copy_for_xl() uses 3 control keys plus 'c'.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/copy_for_xl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copies R data to your clipboard — copy_for_xl","text":"","code":"copy_for_xl(. = NULL)"},{"path":"https://eauleaf.github.io/xlr/reference/copy_for_xl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copies R data to your clipboard — copy_for_xl","text":". dataframe object can coerced dataframe","code":""},{"path":"https://eauleaf.github.io/xlr/reference/copy_for_xl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copies R data to your clipboard — copy_for_xl","text":"data provided coerced tibble; clipboard data side-effect","code":""},{"path":"https://eauleaf.github.io/xlr/reference/copy_for_xl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copies R data to your clipboard — copy_for_xl","text":"set key-chord RStudio, use set_xlr_key_chords(). Copying formatted output clipboard requires package clipr. using Linux, make sure install clipboard tool: apt-get install xclip apt-get install xsel copy_for_xl() coerces input data object tibble prior copying clipboard.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/copy_for_xl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Copies R data to your clipboard — copy_for_xl","text":"quick-keys .pkg xlr use 3 control keys ctrl + alt + shift plus letter.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/copy_for_xl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copies R data to your clipboard — copy_for_xl","text":"","code":"if (FALSE) {  copy_for_xl(iris) copy_for_xl(letters) colours() |> copy_for_xl() head(mtcars) |> copy_for_xl() colours() |> rlang::set_names() |> entibble(another_col = colours()) |> copy_for_xl() dplyr::bind_cols(letters, LETTERS) |> head() |> copy_for_xl() rlang::set_names(letters, LETTERS) |> copy_for_xl()  # To use quick keys. Run {.fn set_xlr_key_chords}. # Then highlight the word 'letters' below and press key-chord `ctrl + alt + shift + c`. letters  }"},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_assigned_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Pop-up used in run_paste_from_xl() — .check_assigned_input","title":"Pop-up used in run_paste_from_xl() — .check_assigned_input","text":"user specified syntactically invalid variable name, provides suggested name asks user accept change .","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_assigned_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pop-up used in run_paste_from_xl() — .check_assigned_input","text":"","code":".check_assigned_input(input_name)"},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_assigned_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pop-up used in run_paste_from_xl() — .check_assigned_input","text":"input_name variable name string","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_assigned_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pop-up used in run_paste_from_xl() — .check_assigned_input","text":"user assigned name string","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_assigned_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pop-up used in run_paste_from_xl() — .check_assigned_input","text":"","code":"if (FALSE) {   .check_assigned_input(' 1 bad name') }"},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_forbidden_pad.html","id":null,"dir":"Reference","previous_headings":"","what":"Error for prohibited padding or more than 1 char — .check_forbidden_pad","title":"Error for prohibited padding or more than 1 char — .check_forbidden_pad","text":"Error prohibited padding 1 char","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_forbidden_pad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error for prohibited padding or more than 1 char — .check_forbidden_pad","text":"","code":".check_forbidden_pad(pad = \"\")"},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_forbidden_pad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error for prohibited padding or more than 1 char — .check_forbidden_pad","text":"pad char: pasting characters tab name, character want use pad numbers align, (e.g. '0' '001' '.' '..1' 3 digits differentiation necessary). Must least 1 character longer. Can space ' ', forbidden characters described details","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_forbidden_pad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error for prohibited padding or more than 1 char — .check_forbidden_pad","text":"single character; throws error input characters \\/:?*'[]","code":""},{"path":[]},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_forbidden_pad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error for prohibited padding or more than 1 char — .check_forbidden_pad","text":"","code":"xlr:::.check_forbidden_pad('.') #> [1] \".\" xlr:::.check_forbidden_pad('-') #> [1] \"-\" if (FALSE) {  # expect errors for the below: \\/:?*'[]  xlr:::.check_forbidden_pad(':') xlr:::.check_forbidden_pad('') xlr:::.check_forbidden_pad(NA) xlr:::.check_forbidden_pad(NULL) xlr:::.check_forbidden_pad(\"\\\\\")  }"},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_tabwidth.html","id":null,"dir":"Reference","previous_headings":"","what":"Update permissible number of tabname characters — .check_tabwidth","title":"Update permissible number of tabname characters — .check_tabwidth","text":"Adjust specified tab/sheet names character count within reasonable values notify user warning changes made Note: min checks already done scrub_tabnames() passing width info","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_tabwidth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update permissible number of tabname characters — .check_tabwidth","text":"","code":".check_tabwidth(width = 31, min_width = 0, quiet = FALSE)"},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_tabwidth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update permissible number of tabname characters — .check_tabwidth","text":"width number characters user requested tab/sheet names min_width minimum number characters permit tab/sheet name quiet quiet overrides tab/sheet names","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_tabwidth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update permissible number of tabname characters — .check_tabwidth","text":"0 31 returned number close user request possible adjusting reasonableness input data","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-check_tabwidth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update permissible number of tabname characters — .check_tabwidth","text":"","code":"xlr:::.check_tabwidth(31) #> [1] 31 xlr:::.check_tabwidth(3, 4) #> ! The minimum width must be greater than the number of characters required #>         to differentiate possible duplicated tabnames plus the characters in `sep`. #>          #> Setting the tabname character width to 4. #> [1] 4 xlr:::.check_tabwidth(34) #> ! Excel limits sheetnames to 31 characters. #> Longer names cause write failure. #> Setting max_width to 31 characters and truncating longer names. #> [1] 31"},{"path":"https://eauleaf.github.io/xlr/reference/dot-fix_forbidden_tabnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Corrects tabnames by replacing reserved chars — .fix_forbidden_tabnames","title":"Corrects tabnames by replacing reserved chars — .fix_forbidden_tabnames","text":"Replacing special characters one--one notifies user replaced characters.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-fix_forbidden_tabnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Corrects tabnames by replacing reserved chars — .fix_forbidden_tabnames","text":"","code":".fix_forbidden_tabnames(tabnames, quiet = FALSE)"},{"path":"https://eauleaf.github.io/xlr/reference/dot-fix_forbidden_tabnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Corrects tabnames by replacing reserved chars — .fix_forbidden_tabnames","text":"tabnames vector tab/sheet names quiet TRUE FALSE suppress notices forbidden-char replacement","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-fix_forbidden_tabnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Corrects tabnames by replacing reserved chars — .fix_forbidden_tabnames","text":"input vector forbidden characters replaced/removed","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-fix_forbidden_tabnames.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Corrects tabnames by replacing reserved chars — .fix_forbidden_tabnames","text":"NA always returned NA NULL acts like c(), .e c(NULL, NULL)","code":""},{"path":[]},{"path":"https://eauleaf.github.io/xlr/reference/dot-fix_forbidden_tabnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Corrects tabnames by replacing reserved chars — .fix_forbidden_tabnames","text":"","code":"c(\"' '?HisTory,*?*!@#$%^&*()_+ '[{1'}]'[:/\\\\]''\", \"\", NA, NULL) |>  xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `\\` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `/` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `:` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `*` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `?` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `?` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `[` #> → Replacing forbidden character with:  `(` #> ! Sheet names should not contain:  `]` #> → Replacing forbidden character with:  `)` #> ! Sheet names should not contain:  `a single quote ' at the start of a tabname` #> → Replacing forbidden character with:  `an empty string` #> ! Sheet names should not contain:  `a single quote ' at the end of a tabname` #> → Replacing forbidden character with:  `an empty string` #> ! Sheet names should not contain:  `the word 'history'` #> → Replacing forbidden character with:  `hist` #> [1] \"` '#HisT,###!@#$%^##()_+ '({1'})'(---)`\" #> [2] \"\"                                        #> [3] NA                                        \" ''''''\" |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `a single quote ' at the end of a tabname` #> → Replacing forbidden character with:  `an empty string` #> [1] \" `\" \"'''1' '\" |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `a single quote ' at the start of a tabname` #> → Replacing forbidden character with:  `an empty string` #> ! Sheet names should not contain:  `a single quote ' at the end of a tabname` #> → Replacing forbidden character with:  `an empty string` #> [1] \"`1' `\" \"'[ ]hi];'\" |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `[` #> → Replacing forbidden character with:  `(` #> ! Sheet names should not contain:  `]` #> → Replacing forbidden character with:  `)` #> ! Sheet names should not contain:  `a single quote ' at the start of a tabname` #> → Replacing forbidden character with:  `an empty string` #> ! Sheet names should not contain:  `a single quote ' at the end of a tabname` #> → Replacing forbidden character with:  `an empty string` #> [1] \"`( )hi);`\" \"!@#$%^&*()_+ {HI} ^\" |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `*` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `?` #> → Replacing forbidden character with:  `#` #> [1] \"!@#$%^##()_+ {HI} ^\" \"'histor'y'\" |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `a single quote ' at the start of a tabname` #> → Replacing forbidden character with:  `an empty string` #> ! Sheet names should not contain:  `a single quote ' at the end of a tabname` #> → Replacing forbidden character with:  `an empty string` #> [1] \"`histor'y`\" \"[:/] \" |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `/` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `:` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `[` #> → Replacing forbidden character with:  `(` #> ! Sheet names should not contain:  `]` #> → Replacing forbidden character with:  `)` #> [1] \"(--) \" \"?/a\\\\\" |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `\\` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `/` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `?` #> → Replacing forbidden character with:  `#` #> [1] \"#-a-\" \"?,*?*?'\" |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `*` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `?` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `a single quote ' at the end of a tabname` #> → Replacing forbidden character with:  `an empty string` #> [1] \"#,####`\" \"[history coursework]\" |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `[` #> → Replacing forbidden character with:  `(` #> ! Sheet names should not contain:  `]` #> → Replacing forbidden character with:  `)` #> ! Sheet names should not contain:  `the word 'history'` #> → Replacing forbidden character with:  `hist` #> [1] \"(hist coursework)\" \"'HISTORIC' History '''\" |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `a single quote ' at the start of a tabname` #> → Replacing forbidden character with:  `an empty string` #> ! Sheet names should not contain:  `a single quote ' at the end of a tabname` #> → Replacing forbidden character with:  `an empty string` #> ! Sheet names should not contain:  `the word 'history'` #> → Replacing forbidden character with:  `hist` #> [1] \"`HISTORIC' Hist `\" \"*[history' buff]*' \" |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `*` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `[` #> → Replacing forbidden character with:  `(` #> ! Sheet names should not contain:  `]` #> → Replacing forbidden character with:  `)` #> ! Sheet names should not contain:  `the word 'history'` #> → Replacing forbidden character with:  `hist` #> [1] \"#(hist' buff)#' \" NA |> xlr:::.fix_forbidden_tabnames() #> [1] NA NULL |> xlr:::.fix_forbidden_tabnames() #> character(0) c(NULL, NA, '[hi?]') |> xlr:::.fix_forbidden_tabnames() #> ! Sheet names should not contain:  `?` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `[` #> → Replacing forbidden character with:  `(` #> ! Sheet names should not contain:  `]` #> → Replacing forbidden character with:  `)` #> [1] NA      \"(hi#)\" c(NULL, NULL) |> xlr:::.fix_forbidden_tabnames() #> character(0) enlist(NULL, NA, '[hi?]') |>  purrr::map(xlr:::.fix_forbidden_tabnames) #> ! Sheet names should not contain:  `?` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `[` #> → Replacing forbidden character with:  `(` #> ! Sheet names should not contain:  `]` #> → Replacing forbidden character with:  `)` #> $`NULL` #> character(0) #>  #> $`NA` #> [1] NA #>  #> $`[hi?]` #> [1] \"(hi#)\" #>"},{"path":"https://eauleaf.github.io/xlr/reference/dot-forbidden_chars_replace.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace forbidden characters in sheet/tab or file names with a warning — .forbidden_chars_replace","title":"Replace forbidden characters in sheet/tab or file names with a warning — .forbidden_chars_replace","text":"non-exported function called scrub_tabnames() alter spreadsheet sheet names.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-forbidden_chars_replace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace forbidden characters in sheet/tab or file names with a warning — .forbidden_chars_replace","text":"","code":".forbidden_chars_replace(   names,   pattern = \"\",   replacement = \"\",   pattern_text = pattern,   repl_text = replacement,   quiet = FALSE )"},{"path":"https://eauleaf.github.io/xlr/reference/dot-forbidden_chars_replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace forbidden characters in sheet/tab or file names with a warning — .forbidden_chars_replace","text":"names vector tab/sheet names pattern regular expression describing forbidden characters replacement text taking place forbidden characters pattern_text description characters replaced pattern regex, default repeat pattern repl_text description replacements forbidden chars, default repeat replacement quiet TRUE FALSE quiet notices forbidden char replacement","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-forbidden_chars_replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace forbidden characters in sheet/tab or file names with a warning — .forbidden_chars_replace","text":"input vector forbidden characters replaced/removed","code":""},{"path":[]},{"path":"https://eauleaf.github.io/xlr/reference/dot-forbidden_chars_replace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace forbidden characters in sheet/tab or file names with a warning — .forbidden_chars_replace","text":"","code":"# for tests: tab_names <- c(NA, \"''''''\", \"[]hi];\", \"'HI'\", \"'hist''\", \"[:/]\", \"?/a\\\\\\\\\", \"'?,*?*'\", \"'[history coursework]'\", \"'HISTORIC'AL''''\") xlr:::.forbidden_chars_replace(tab_names, pattern = '[\\\\\\\\/:]', replacement = '-',                                pattern_text = '\\\\, /, or :') #> ! Sheet names should not contain:  `\\, /, or :` #> → Replacing forbidden character with:  `-` #>  [1] NA                       \"''''''\"                 \"[]hi];\"                 #>  [4] \"'HI'\"                   \"'hist''\"                \"[--]\"                   #>  [7] \"?-a--\"                  \"'?,*?*'\"                \"'[history coursework]'\" #> [10] \"'HISTORIC'AL''''\"       xlr:::.forbidden_chars_replace(tab_names, pattern = '[?*]', replacement = '#',                                pattern_text = '? or *') #> ! Sheet names should not contain:  `? or *` #> → Replacing forbidden character with:  `#` #>  [1] NA                       \"''''''\"                 \"[]hi];\"                 #>  [4] \"'HI'\"                   \"'hist''\"                \"[:/]\"                   #>  [7] \"#/a\\\\\\\\\"                \"'#,###'\"                \"'[history coursework]'\" #> [10] \"'HISTORIC'AL''''\"       xlr:::.forbidden_chars_replace(tab_names, pattern = '(?i)(hist)ory',                                replacement = '\\\\1', pattern_text = 'history',                                repl_text = 'hist') #> ! Sheet names should not contain:  `history` #> → Replacing forbidden character with:  `hist` #>  [1] NA                    \"''''''\"              \"[]hi];\"              #>  [4] \"'HI'\"                \"'hist''\"             \"[:/]\"                #>  [7] \"?/a\\\\\\\\\"             \"'?,*?*'\"             \"'[hist coursework]'\" #> [10] \"'HISTORIC'AL''''\"    xlr:::.forbidden_chars_replace(tab_names, pattern = '\\\\[', replacement = '{',                                pattern_text = '[brackets]', repl_text = '{curly braces}') #> ! Sheet names should not contain:  `[brackets]` #> → Replacing forbidden character with:  `{curly braces}` #>  [1] NA                       \"''''''\"                 \"{]hi];\"                 #>  [4] \"'HI'\"                   \"'hist''\"                \"{:/]\"                   #>  [7] \"?/a\\\\\\\\\"                \"'?,*?*'\"                \"'{history coursework]'\" #> [10] \"'HISTORIC'AL''''\"       xlr:::.forbidden_chars_replace(tab_names, pattern = ']', replacement = '}', quiet = TRUE) #>  [1] NA                       \"''''''\"                 \"[}hi};\"                 #>  [4] \"'HI'\"                   \"'hist''\"                \"[:/}\"                   #>  [7] \"?/a\\\\\\\\\"                \"'?,*?*'\"                \"'[history coursework}'\" #> [10] \"'HISTORIC'AL''''\"       xlr:::.forbidden_chars_replace(tab_names, pattern = \"^'+\", replacement = '`',                                pattern_text = \"single quotes '' at tabname start or end\",                                repl_text = \"the empty string ''\") #> ! Sheet names should not contain:  `single quotes '' at tabname start or end` #> → Replacing forbidden character with:  `the empty string ''` #>  [1] NA                       \"`\"                      \"[]hi];\"                 #>  [4] \"`HI'\"                   \"`hist''\"                \"[:/]\"                   #>  [7] \"?/a\\\\\\\\\"                \"`?,*?*'\"                \"`[history coursework]'\" #> [10] \"`HISTORIC'AL''''\"       xlr:::.forbidden_chars_replace(tab_names, pattern = \"'+$\", replacement = '', quiet = TRUE) #>  [1] NA                      \"\"                      \"[]hi];\"                #>  [4] \"'HI\"                   \"'hist\"                 \"[:/]\"                  #>  [7] \"?/a\\\\\\\\\"               \"'?,*?*\"                \"'[history coursework]\" #> [10] \"'HISTORIC'AL\""},{"path":"https://eauleaf.github.io/xlr/reference/dot-format_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds breaks to the text of a deparsed data structure script — .format_script","title":"Adds breaks to the text of a deparsed data structure script — .format_script","text":"Adds breaks text deparsed data structure script","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-format_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds breaks to the text of a deparsed data structure script — .format_script","text":"","code":".format_script(obj_expr, snip_width = 70)"},{"path":"https://eauleaf.github.io/xlr/reference/dot-format_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds breaks to the text of a deparsed data structure script — .format_script","text":"obj_expr text data structure snip_width limit number characters desired data folding comma-space breaks","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-format_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds breaks to the text of a deparsed data structure script — .format_script","text":"string embedded '/n' line breaks","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-format_script.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds breaks to the text of a deparsed data structure script — .format_script","text":"","code":"letters[1:5] |> deparse1(backtick = TRUE) |> xlr:::.format_script() #> [1] \"c(\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\")\" list(tail(iris,2)) |> deparse1(backtick = TRUE) |> xlr:::.format_script() #> [1] \"list(\\nstructure(\\nlist(\\nSepal.Length = c(\\n6.2, 5.9\\n), \\nSepal.Width = c(\\n3.4, 3\\n), \\nPetal.Length = c(\\n5.4, 5.1\\n), \\nPetal.Width = c(\\n2.3, 1.8\\n), \\nSpecies = structure(\\nc(\\n3L, 3L\\n), \\nlevels = c(\\n\\\"setosa\\\", \\\"versicolor\\\", \\\"virginica\\\"\\n), \\nclass = \\\"factor\\\"\\n)\\n), \\nrow.names = 149:150, \\nclass = \\\"data.frame\\\"\\n)\\n)\\n\""},{"path":"https://eauleaf.github.io/xlr/reference/dot-locn_reporter.html","id":null,"dir":"Reference","previous_headings":"","what":"Report out save location — .locn_reporter","title":"Report out save location — .locn_reporter","text":"Report save location","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-locn_reporter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report out save location — .locn_reporter","text":"","code":".locn_reporter(path, desc = \"\")"},{"path":"https://eauleaf.github.io/xlr/reference/dot-locn_reporter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report out save location — .locn_reporter","text":"path complete path cat desc optional describe type path","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-locn_reporter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report out save location — .locn_reporter","text":"input path","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-locn_reporter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report out save location — .locn_reporter","text":"","code":"here::here() |> xlr:::.locn_reporter( desc = 'Workbook ') #>  #> Workbook location: #>     '/home/runner/work/xlr/xlr' #>  #> [1] \"/home/runner/work/xlr/xlr\""},{"path":"https://eauleaf.github.io/xlr/reference/dot-paste_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste name components together in order specified by paste_side — .paste_names","title":"Paste name components together in order specified by paste_side — .paste_names","text":"Paste name components together order specified paste_side","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-paste_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste name components together in order specified by paste_side — .paste_names","text":"","code":".paste_names(prefix_suffix, tabnames, sep = \".\", paste_side = \"right\")"},{"path":"https://eauleaf.github.io/xlr/reference/dot-paste_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste name components together in order specified by paste_side — .paste_names","text":"prefix_suffix vector padded numbers tabnames vector tab/sheet names sep separator characters paste_side 'right' 'left', side attach unique numbering ","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-paste_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste name components together in order specified by paste_side — .paste_names","text":"vector glued tabnames","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-paste_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste name components together in order specified by paste_side — .paste_names","text":"","code":"xlr:::.paste_names('--1', c('hello','goodbye')) #> [1] \"hello.--1\"   \"goodbye.--1\" xlr:::.paste_names('..1', c('hello','goodbye'), '->', 'left') #> [1] \"..1->hello\"   \"..1->goodbye\" xlr:::.paste_names(NA, c('hello','goodbye'), '->', 'left') #> [1] \"NA->hello\"   \"NA->goodbye\""},{"path":"https://eauleaf.github.io/xlr/reference/dot-remove_doublequotes.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes external set of quotes for named list if the list names have double-quotes — .remove_doublequotes","title":"Removes external set of quotes for named list if the list names have double-quotes — .remove_doublequotes","text":"Removes external set quotes named list list names double-quotes","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-remove_doublequotes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes external set of quotes for named list if the list names have double-quotes — .remove_doublequotes","text":"","code":".remove_doublequotes(named_list = NULL)"},{"path":"https://eauleaf.github.io/xlr/reference/dot-remove_doublequotes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes external set of quotes for named list if the list names have double-quotes — .remove_doublequotes","text":"named_list list names","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-remove_doublequotes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes external set of quotes for named list if the list names have double-quotes — .remove_doublequotes","text":"named list names double-quotes","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-remove_doublequotes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes external set of quotes for named list if the list names have double-quotes — .remove_doublequotes","text":"","code":"tibble::tibble(!!!letters) |> as.list() |> xlr:::.remove_doublequotes() #> $a #> [1] \"a\" #>  #> $b #> [1] \"b\" #>  #> $c #> [1] \"c\" #>  #> $d #> [1] \"d\" #>  #> $e #> [1] \"e\" #>  #> $f #> [1] \"f\" #>  #> $g #> [1] \"g\" #>  #> $h #> [1] \"h\" #>  #> $i #> [1] \"i\" #>  #> $j #> [1] \"j\" #>  #> $k #> [1] \"k\" #>  #> $l #> [1] \"l\" #>  #> $m #> [1] \"m\" #>  #> $n #> [1] \"n\" #>  #> $o #> [1] \"o\" #>  #> $p #> [1] \"p\" #>  #> $q #> [1] \"q\" #>  #> $r #> [1] \"r\" #>  #> $s #> [1] \"s\" #>  #> $t #> [1] \"t\" #>  #> $u #> [1] \"u\" #>  #> $v #> [1] \"v\" #>  #> $w #> [1] \"w\" #>  #> $x #> [1] \"x\" #>  #> $y #> [1] \"y\" #>  #> $z #> [1] \"z\" #>"},{"path":"https://eauleaf.github.io/xlr/reference/dot-to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Process dataframes, matrices, vectors, factors to named tibble — .to_tibble","title":"Process dataframes, matrices, vectors, factors to named tibble — .to_tibble","text":"Function called entibble().","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process dataframes, matrices, vectors, factors to named tibble — .to_tibble","text":"","code":".to_tibble(.in_data = NULL, .rowname = \"rowname\", .vec_name = \"\")"},{"path":"https://eauleaf.github.io/xlr/reference/dot-to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process dataframes, matrices, vectors, factors to named tibble — .to_tibble","text":".in_data user data tibble .rowname user specified rowname; ignored rownames .vec_name name expression; passed .vector_2_tibble()","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process dataframes, matrices, vectors, factors to named tibble — .to_tibble","text":"tibble","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-to_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process dataframes, matrices, vectors, factors to named tibble — .to_tibble","text":"","code":".to_tibble(head(mtcars), 'vehicle') #> # A tibble: 6 × 12 #>   vehicle        mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Mazda RX4     21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2 Mazda RX4 W…  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3 Datsun 710    22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 #> 4 Hornet 4 Dr…  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1 #> 5 Hornet Spor…  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2 #> 6 Valiant       18.1     6   225   105  2.76  3.46  20.2     1     0     3     1 iris |> .to_tibble() #> # A tibble: 150 × 5 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <chr>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ℹ 140 more rows letters |> .to_tibble() #> # A tibble: 26 × 1 #>    ``    #>    <chr> #>  1 a     #>  2 b     #>  3 c     #>  4 d     #>  5 e     #>  6 f     #>  7 g     #>  8 h     #>  9 i     #> 10 j     #> # ℹ 16 more rows letters |> rlang::set_names() |> .to_tibble() #> # A tibble: 26 × 2 #>    rowname ``    #>    <chr>   <chr> #>  1 a       a     #>  2 b       b     #>  3 c       c     #>  4 d       d     #>  5 e       e     #>  6 f       f     #>  7 g       g     #>  8 h       h     #>  9 i       i     #> 10 j       j     #> # ℹ 16 more rows list(1:10,11:20) |> .to_tibble() #> # A tibble: 2 × 1 #>   ``         #>   <list>     #> 1 <int [10]> #> 2 <int [10]> as.matrix(list(1:3,11:13,c('a','b','c'))) |> entibble() #> # A tibble: 3 × 3 #>     `1`   `2` `3`   #>   <int> <int> <chr> #> 1     1    11 a     #> 2     2    12 b     #> 3     3    13 c"},{"path":"https://eauleaf.github.io/xlr/reference/dot-vector_2_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a named vector, factor, or list to a 1 or 2 column tibble — .vector_2_tibble","title":"Transform a named vector, factor, or list to a 1 or 2 column tibble — .vector_2_tibble","text":"Function called .to_tibble().","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-vector_2_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a named vector, factor, or list to a 1 or 2 column tibble — .vector_2_tibble","text":"","code":".vector_2_tibble(.in_vec, .rowname = \"rowname\", .vec_name = \"\")"},{"path":"https://eauleaf.github.io/xlr/reference/dot-vector_2_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a named vector, factor, or list to a 1 or 2 column tibble — .vector_2_tibble","text":".in_vec input data .rowname user specified name rows .vec_name name vector, typically expression","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-vector_2_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a named vector, factor, or list to a 1 or 2 column tibble — .vector_2_tibble","text":"tibble","code":""},{"path":"https://eauleaf.github.io/xlr/reference/dot-vector_2_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a named vector, factor, or list to a 1 or 2 column tibble — .vector_2_tibble","text":"","code":"letters[1:5] |> rlang::set_names() |> .vector_2_tibble() #> # A tibble: 5 × 2 #>   rowname ``    #>   <chr>   <chr> #> 1 a       a     #> 2 b       b     #> 3 c       c     #> 4 d       d     #> 5 e       e     letters[1:5] |> rlang::set_names() |> .vector_2_tibble(.rowname = 'a_name', .vec_name = 'alphas') #> # A tibble: 5 × 2 #>   a_name alphas #>   <chr>  <chr>  #> 1 a      a      #> 2 b      b      #> 3 c      c      #> 4 d      d      #> 5 e      e"},{"path":"https://eauleaf.github.io/xlr/reference/enlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a list with auto-named list elements — enlist","title":"Make a list with auto-named list elements — enlist","text":"Use place list produce list auto-assigned names avoid adding list structure.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/enlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a list with auto-named list elements — enlist","text":"","code":"enlist(..., .label = NULL)"},{"path":"https://eauleaf.github.io/xlr/reference/enlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a list with auto-named list elements — enlist","text":"... data objects; unnamed, enlist() forces names input expression .label function character vector rename list elements, e.g. .label = ~substr(.,1,5). .label passed nm 'rlang::set_names()'","code":""},{"path":"https://eauleaf.github.io/xlr/reference/enlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a list with auto-named list elements — enlist","text":"named list","code":""},{"path":"https://eauleaf.github.io/xlr/reference/enlist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a list with auto-named list elements — enlist","text":"Creates list input list element force-named assigned name input expression, .e.g  enlist(mtcars). list exists, enlist places arguments list, e.g. enlist(c('hi', 'hello')). passed single bare list, enlist add additional list layer. , enlist() stack lists structure's sake alone, e.g. enlist(enlist(letters)). dis-embedding case, user provided name passed =, like enlist(some_name = list('hi')), may discarded. Handles dots, splicing, injection, e.g. enlist(!!!letters). Ignores input argument separator commas, e.g. enlist(,,'hi',,,). Naming output can performed function parameter .label, e.g. enlist('', .label = ~paste0('name_',.))","code":""},{"path":"https://eauleaf.github.io/xlr/reference/enlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a list with auto-named list elements — enlist","text":"","code":"# Examples compare `enlist()` to `list()`:  # Auto-naming by input expression: enlist(head(iris), tail(mtcars)) #> $`head(iris)` #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa #>  #> $`tail(mtcars)` #>                 mpg cyl  disp  hp drat    wt qsec vs am gear carb #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2 #> Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4 #> Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6 #> Maserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2 #>  list(head(iris), tail(mtcars)) #> [[1]] #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa #>  #> [[2]] #>                 mpg cyl  disp  hp drat    wt qsec vs am gear carb #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2 #> Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4 #> Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6 #> Maserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2 #>   # Naming a list element works similar to `list()`: enlist(some_name = letters) #> $some_name #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>  list(some_name = letters) #> $some_name #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>   # Naming by passing a function to `.label`: enlist(letters, .label =  'some_name') #> $some_name #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>  enlist(letters, .label =  ~paste0(.,'_1')) #> $letters_1 #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>  enlist('black','white','cyan', .label =  'color_grp_1') #> $color_grp_1 #> [1] \"black\" #>  #> $color_grp_1 #> [1] \"white\" #>  #> $color_grp_1 #> [1] \"cyan\" #>  enlist(letters, .label =  ~'')  # removes names #> [[1]] #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>    # List embedding: enlist(enlist(enlist(letters))) # 1 list deep #> $`enlist(enlist(letters))` #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>  list(list(list(letters))) # 3 lists deep #> [[1]] #> [[1]][[1]] #> [[1]][[1]][[1]] #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>  #>  #>   list(letters, b = enlist(a = letters, 'blue')) |> enlist() #> $letters #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>  #> $b #> $b$a #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>  #> $b$blue #> [1] \"blue\" #>  #>   # Handles non-standard evaluation: candy <- list('lollipops','gum') enlist(candy, !!!candy) #> $candy #> $candy[[1]] #> [1] \"lollipops\" #>  #> $candy[[2]] #> [1] \"gum\" #>  #>  #> $lollipops #> [1] \"lollipops\" #>  #> $gum #> [1] \"gum\" #>"},{"path":"https://eauleaf.github.io/xlr/reference/enscript.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes the script to reproduce the input — enscript","title":"Writes the script to reproduce the input — enscript","text":"interactive use. enscript() obtains R's deparsed internal representation input data object prepares object input script. function's purpose save user inconvenience reformatting console output data input code.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/enscript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes the script to reproduce the input — enscript","text":"","code":"enscript(. = NULL, to_clipboard = TRUE)"},{"path":"https://eauleaf.github.io/xlr/reference/enscript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes the script to reproduce the input — enscript","text":". data object expression transform script to_clipboard default TRUE; whether copy resulting script clipboard","code":""},{"path":"https://eauleaf.github.io/xlr/reference/enscript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes the script to reproduce the input — enscript","text":"formatted deparsed expression, invisibly to_clipboard = FALSE. primary output object's internal expression written clipboard memory","code":""},{"path":"https://eauleaf.github.io/xlr/reference/enscript.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Writes the script to reproduce the input — enscript","text":"Copying formatted output clipboard requires package clipr. set key-chord ctrl+alt+shift+n RStudio, use set_xlr_key_chords(). enscript key-chord helpful making tests function's test file. using Linux, make sure install clipboard tool, e.g. apt-get install xclip apt-get install xsel","code":""},{"path":"https://eauleaf.github.io/xlr/reference/enscript.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Writes the script to reproduce the input — enscript","text":"quick-keys .pkg xlr use 3 control keys ctrl + alt + shift plus letter.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/enscript.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Writes the script to reproduce the input — enscript","text":"","code":"if (FALSE) {  enscript(letters) # `letters` is copied to clipboard; press `ctrl + v` to paste the output  enscript(1:5 * 10) rep(\"🎊🌈\",3) |> enscript()  dplyr::starwars |> head() |> enscript()  (flowers = tail(iris,10)) enscript(flowers)  (days_to_go <- seq.Date(Sys.Date(), by = 1, length.out = 7)) days_to_go |> enscript()  letters |> purrr::set_names(LETTERS) |> enlist() |> enscript()  colours() |> enscript()  candy <- list('lollipops','gum') enlist(candy, !!candy, !!!candy, enlist(!!!candy)) |> enscript() enlist(!!letters)  }  # returns the deparsed script as plain text enscript(letters, to_clipboard = FALSE) #> [1] \"letters <- c(\\n\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\", \\\"f\\\", \\\"g\\\", \\\"h\\\", \\\"i\\\", \\\"j\\\", \\\"k\\\", \\\"l\\\", \\n\\\"m\\\", \\\"n\\\", \\\"o\\\", \\\"p\\\", \\\"q\\\", \\\"r\\\", \\\"s\\\", \\\"t\\\", \\\"u\\\", \\\"v\\\", \\\"w\\\", \\\"x\\\", \\n\\\"y\\\", \\\"z\\\"\\n)\\n\""},{"path":"https://eauleaf.github.io/xlr/reference/entibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data objects to a tibble with defaults optimized for spreadsheet (2D) presentation — entibble","title":"Convert data objects to a tibble with defaults optimized for spreadsheet (2D) presentation — entibble","text":"Default behaviors: Always includes rownames tibble, available repeat input elements obtain common lengths Arranges lists uniform arrays columns single tibble list ragged elements becomes two column tibble first column contains names second column nested list unconcerned duplicate column names unless specified user .name_repair","code":""},{"path":"https://eauleaf.github.io/xlr/reference/entibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data objects to a tibble with defaults optimized for spreadsheet (2D) presentation — entibble","text":"","code":"entibble(   ...,   .rowname = \"rowname\",   .name_repair = c(\"minimal\", \"check_unique\", \"unique\", \"universal\", \"unique_quiet\",     \"universal_quiet\") )"},{"path":"https://eauleaf.github.io/xlr/reference/entibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data objects to a tibble with defaults optimized for spreadsheet (2D) presentation — entibble","text":"... object expression convert tibble .rowname string; name column containing rownames. rownames present dataframe, .rowname ignored. .name_repair Treatment problematic column names: \"minimal\": name repair checks, beyond basic existence, \"unique\": Make sure names unique empty, \"check_unique\": (default value), name repair, check unique, \"universal\": Make names unique syntactic function: apply custom name repair (e.g., .name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function() argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce .","code":""},{"path":"https://eauleaf.github.io/xlr/reference/entibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data objects to a tibble with defaults optimized for spreadsheet (2D) presentation — entibble","text":"tibble rownames column","code":""},{"path":"https://eauleaf.github.io/xlr/reference/entibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert data objects to a tibble with defaults optimized for spreadsheet (2D) presentation — entibble","text":"@details Built work function xl() produce 2D output spreadsheets. entibble() liberal names, duplicate column names, tries produce flat 2D data place nested data.","code":""},{"path":[]},{"path":"https://eauleaf.github.io/xlr/reference/entibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data objects to a tibble with defaults optimized for spreadsheet (2D) presentation — entibble","text":"","code":"letters |> entibble() #> # A tibble: 26 × 1 #>    letters #>    <chr>   #>  1 a       #>  2 b       #>  3 c       #>  4 d       #>  5 e       #>  6 f       #>  7 g       #>  8 h       #>  9 i       #> 10 j       #> # ℹ 16 more rows  # naming examples (example_data <- letters |>  purrr::set_names(LETTERS)) #>   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S   T  #> \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\"  #>   U   V   W   X   Y   Z  #> \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"  example_data |> entibble() #> # A tibble: 26 × 2 #>    rowname example_data #>    <chr>   <chr>        #>  1 A       a            #>  2 B       b            #>  3 C       c            #>  4 D       d            #>  5 E       e            #>  6 F       f            #>  7 G       g            #>  8 H       h            #>  9 I       i            #> 10 J       j            #> # ℹ 16 more rows example_data |> entibble(.rowname = 'a user-specified name') #> # A tibble: 26 × 2 #>    `a user-specified name` example_data #>    <chr>                   <chr>        #>  1 A                       a            #>  2 B                       b            #>  3 C                       c            #>  4 D                       d            #>  5 E                       e            #>  6 F                       f            #>  7 G                       g            #>  8 H                       h            #>  9 I                       i            #> 10 J                       j            #> # ℹ 16 more rows example_data |> entibble(.name_repair = ~c('name_A', 'name_B')) #> # A tibble: 26 × 2 #>    name_A name_B #>    <chr>  <chr>  #>  1 A      a      #>  2 B      b      #>  3 C      c      #>  4 D      d      #>  5 E      e      #>  6 F      f      #>  7 G      g      #>  8 H      h      #>  9 I      i      #> 10 J      j      #> # ℹ 16 more rows entibble(example_data, example_data) #> # A tibble: 26 × 4 #>    rowname example_data rowname example_data #>    <chr>   <chr>        <chr>   <chr>        #>  1 A       a            A       a            #>  2 B       b            B       b            #>  3 C       c            C       c            #>  4 D       d            D       d            #>  5 E       e            E       e            #>  6 F       f            F       f            #>  7 G       g            G       g            #>  8 H       h            H       h            #>  9 I       i            I       i            #> 10 J       j            J       j            #> # ℹ 16 more rows entibble(x = 1:3, x = 11:13, .name_repair = 'unique_quiet') #> # A tibble: 3 × 2 #>   x...1 x...2 #>   <int> <int> #> 1     1    11 #> 2     2    12 #> 3     3    13 mtcars |> entibble(.rowname = 'vehicle') #> # A tibble: 32 × 12 #>    vehicle       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows  # nests ragged data entibble(example_data, !!!letters) #> # A tibble: 27 × 2 #>    rowname      `list(ragged_elements)` #>    <chr>        <list>                  #>  1 example_data <tibble [26 × 2]>       #>  2 a            <tibble [1 × 1]>        #>  3 b            <tibble [1 × 1]>        #>  4 c            <tibble [1 × 1]>        #>  5 d            <tibble [1 × 1]>        #>  6 e            <tibble [1 × 1]>        #>  7 f            <tibble [1 × 1]>        #>  8 g            <tibble [1 × 1]>        #>  9 h            <tibble [1 × 1]>        #> 10 i            <tibble [1 × 1]>        #> # ℹ 17 more rows  # spreads conforming rows and lists of conforming rows entibble(x = 1:3, y = 11:13) #> # A tibble: 3 × 2 #>       x     y #>   <int> <int> #> 1     1    11 #> 2     2    12 #> 3     3    13 entibble(x = 1:3, y = 10:14) #> # A tibble: 2 × 2 #>   rowname `list(ragged_elements)` #>   <chr>   <list>                  #> 1 x       <tibble [3 × 1]>        #> 2 y       <tibble [5 × 1]>         # be somewhat careful about conforming-row inputs; it is different from `tibble()` enlist(head(iris), tail(mtcars)) |> entibble() #> # A tibble: 6 × 17 #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species rowname    mpg   cyl #>          <dbl>       <dbl>        <dbl>       <dbl> <chr>   <chr>    <dbl> <dbl> #> 1          5.1         3.5          1.4         0.2 setosa  Porsche…  26       4 #> 2          4.9         3            1.4         0.2 setosa  Lotus E…  30.4     4 #> 3          4.7         3.2          1.3         0.2 setosa  Ford Pa…  15.8     8 #> 4          4.6         3.1          1.5         0.2 setosa  Ferrari…  19.7     6 #> 5          5           3.6          1.4         0.2 setosa  Maserat…  15       8 #> 6          5.4         3.9          1.7         0.4 setosa  Volvo 1…  21.4     4 #> # ℹ 9 more variables: disp <dbl>, hp <dbl>, drat <dbl>, wt <dbl>, qsec <dbl>, #> #   vs <dbl>, am <dbl>, gear <dbl>, carb <dbl> as.matrix(list(1:10,11:20)) |> entibble() #> # A tibble: 10 × 2 #>      `1`   `2` #>    <int> <int> #>  1     1    11 #>  2     2    12 #>  3     3    13 #>  4     4    14 #>  5     5    15 #>  6     6    16 #>  7     7    17 #>  8     8    18 #>  9     9    19 #> 10    10    20  # if you want to ensure separate lists, call [purrr::map()] or [list_iron()] enlist(head(iris), tail(mtcars)) |> purrr::map(entibble) #> $`head(iris)` #> # A tibble: 6 × 5 #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>          <dbl>       <dbl>        <dbl>       <dbl> <chr>   #> 1          5.1         3.5          1.4         0.2 setosa  #> 2          4.9         3            1.4         0.2 setosa  #> 3          4.7         3.2          1.3         0.2 setosa  #> 4          4.6         3.1          1.5         0.2 setosa  #> 5          5           3.6          1.4         0.2 setosa  #> 6          5.4         3.9          1.7         0.4 setosa  #>  #> $`tail(mtcars)` #> # A tibble: 6 × 12 #>   rowname        mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Porsche 914…  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #> 2 Lotus Europa  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #> 3 Ford Panter…  15.8     8 351     264  4.22  3.17  14.5     0     1     5     4 #> 4 Ferrari Dino  19.7     6 145     175  3.62  2.77  15.5     0     1     5     6 #> 5 Maserati Bo…  15       8 301     335  3.54  3.57  14.6     0     1     5     8 #> 6 Volvo 142E    21.4     4 121     109  4.11  2.78  18.6     1     1     4     2 #>  enlist(head(iris), tail(mtcars)) |> list_iron(.f = entibble) #> $`enlist(head(iris), tail(mtcars))|head(iris)` #> # A tibble: 6 × 5 #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>          <dbl>       <dbl>        <dbl>       <dbl> <chr>   #> 1          5.1         3.5          1.4         0.2 setosa  #> 2          4.9         3            1.4         0.2 setosa  #> 3          4.7         3.2          1.3         0.2 setosa  #> 4          4.6         3.1          1.5         0.2 setosa  #> 5          5           3.6          1.4         0.2 setosa  #> 6          5.4         3.9          1.7         0.4 setosa  #>  #> $`enlist(head(iris), tail(mtcars))|tail(mtcars)` #> # A tibble: 6 × 12 #>   rowname        mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Porsche 914…  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #> 2 Lotus Europa  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #> 3 Ford Panter…  15.8     8 351     264  4.22  3.17  14.5     0     1     5     4 #> 4 Ferrari Dino  19.7     6 145     175  3.62  2.77  15.5     0     1     5     6 #> 5 Maserati Bo…  15       8 301     335  3.54  3.57  14.6     0     1     5     8 #> 6 Volvo 142E    21.4     4 121     109  4.11  2.78  18.6     1     1     4     2 #>   # makes multi-dimensional tables 2D: Titanic |> dim() #> [1] 4 2 2 2 Titanic |> entibble() #> # A tibble: 32 × 5 #>    Class Sex    Age   Survived  Freq #>    <chr> <chr>  <chr> <chr>    <dbl> #>  1 1st   Male   Child No           0 #>  2 2nd   Male   Child No           0 #>  3 3rd   Male   Child No          35 #>  4 Crew  Male   Child No           0 #>  5 1st   Female Child No           0 #>  6 2nd   Female Child No           0 #>  7 3rd   Female Child No          17 #>  8 Crew  Female Child No           0 #>  9 1st   Male   Adult No         118 #> 10 2nd   Male   Adult No         154 #> # ℹ 22 more rows"},{"path":"https://eauleaf.github.io/xlr/reference/expr_savepath.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a savepath from user expression or user specs — expr_savepath","title":"Create a savepath from user expression or user specs — expr_savepath","text":"use function takes dots","code":""},{"path":"https://eauleaf.github.io/xlr/reference/expr_savepath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a savepath from user expression or user specs — expr_savepath","text":"","code":"expr_savepath(..., .path = NULL, .file_suffix = \".xlsx\", .tmp_prefix = \"xlr-\")"},{"path":"https://eauleaf.github.io/xlr/reference/expr_savepath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a savepath from user expression or user specs — expr_savepath","text":"... expression (unused .path specified) .path full save path file name string without suffix .file_suffix file type, e.g. '.xlsx' '.pdf' .tmp_prefix producing temp file, prefix date time name components, e.g. 'xlr'","code":""},{"path":"https://eauleaf.github.io/xlr/reference/expr_savepath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a savepath from user expression or user specs — expr_savepath","text":"complete path string","code":""},{"path":"https://eauleaf.github.io/xlr/reference/expr_savepath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a savepath from user expression or user specs — expr_savepath","text":"","code":"expr_savepath(.path = 'hi') #> [1] \"/home/runner/work/xlr/xlr/hi.xlsx\" iris |> expr_savepath() #> [1] \"/tmp/RtmpKdtnmz/xlr-iris_20231219_0536_11441.xlsx\" iris |> expr_savepath(.path = 'hi') #> [1] \"/home/runner/work/xlr/xlr/hi.xlsx\" expr_savepath(iris, .file_suffix = '.pdf', .tmp_prefix = 'boing-') #> [1] \"/tmp/RtmpKdtnmz/boing-iris_20231219_0536_11444.pdf\" # .path, if specified, overrides prefix expr_savepath(.path = 'hi', .file_suffix = '.pdf', .tmp_prefix = 'boing-') #> [1] \"/home/runner/work/xlr/xlr/hi.pdf\" iris |> expr_savepath(.path = 'somewhere/hi/bye', .file_suffix = '.pdf') #> [1] \"/home/runner/work/xlr/xlr/somewhere/hi/bye.pdf\""},{"path":"https://eauleaf.github.io/xlr/reference/list_iron.html","id":null,"dir":"Reference","previous_headings":"","what":"Iron embedded lists out of a list of objects — list_iron","title":"Iron embedded lists out of a list of objects — list_iron","text":"Recursively dis-embed objects lists lists single, linear list list objects.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/list_iron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iron embedded lists out of a list of objects — list_iron","text":"","code":"list_iron(   ...,   name_spec = \"{outer}|{inner}\",   name_repair = c(\"minimal\", \"unique\", \"check_unique\", \"universal\", \"unique_quiet\",     \"universal_quiet\"),   .f = identity )"},{"path":"https://eauleaf.github.io/xlr/reference/list_iron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iron embedded lists out of a list of objects — list_iron","text":"... objects list objects. name_spec inner outer names present, control combined. glue specification uses variables inner outer. name_repair One \"minimal\", \"unique\", \"universal\", \"check_unique\". See vctrs::vec_as_names() meaning options. .f function apply every object list; default function identity.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/list_iron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iron embedded lists out of a list of objects — list_iron","text":"flat named list objects","code":""},{"path":"https://eauleaf.github.io/xlr/reference/list_iron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iron embedded lists out of a list of objects — list_iron","text":"object list, list_iron places object list. Removes empty embedded lists. Removes empty comma-separated arguments. spreadsheets tabs hierarchical structure, list data objects prepare presentation within workbook must flattened sheets. function precursor printing listed data objects xlr. list_iron forces objects embedded object list become single-file list, optionally conform function passed user, e.g. entibble(). list_iron acts similar purrr::list_flatten(), collapses embedded lists rather single layer. Also concatenates embedded-list names via parameter name_spec.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/list_iron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iron embedded lists out of a list of objects — list_iron","text":"","code":"head(iris) |> list_iron() #> $`head(iris)` #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa #>  head(iris) |> list() |> list() |> list() |> list_iron() #> $`list(list(list(head(iris))))` #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa #>  list_iron(list(list(iris)), mtcars, .f = ~tail(., 2)) #> $`list(list(iris))` #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 149          6.2         3.4          5.4         2.3 virginica #> 150          5.9         3.0          5.1         1.8 virginica #>  #> $mtcars #>                mpg cyl disp  hp drat   wt qsec vs am gear carb #> Maserati Bora 15.0   8  301 335 3.54 3.57 14.6  0  1    5    8 #> Volvo 142E    21.4   4  121 109 4.11 2.78 18.6  1  1    4    2 #>   # Compare list structure to purrr::list_flatten(): a_list <- list(list(1, list(), 2, list(3))) a_list |> str() #> List of 1 #>  $ :List of 4 #>   ..$ : num 1 #>   ..$ : list() #>   ..$ : num 2 #>   ..$ :List of 1 #>   .. ..$ : num 3 a_list |> purrr::list_flatten() |> str() #> List of 4 #>  $ : num 1 #>  $ : list() #>  $ : num 2 #>  $ :List of 1 #>   ..$ : num 3 a_list |> list_iron() |> str() #> List of 3 #>  $ a_list|1: num 1 #>  $ a_list|2: num 2 #>  $ a_list|3: num 3  # Naming examples: messy_list <- list(list(list(1:5), a = list(5:1, 'green', list('blue')), letters)) messy_list |> str() #> List of 1 #>  $ :List of 3 #>   ..$  :List of 1 #>   .. ..$ : int [1:5] 1 2 3 4 5 #>   ..$ a:List of 3 #>   .. ..$ : int [1:5] 5 4 3 2 1 #>   .. ..$ : chr \"green\" #>   .. ..$ :List of 1 #>   .. .. ..$ : chr \"blue\" #>   ..$  : chr [1:26] \"a\" \"b\" \"c\" \"d\" ... messy_list |> list_iron() |> str() #> List of 5 #>  $ messy_list|   : int [1:5] 1 2 3 4 5 #>  $ messy_list|a|1: int [1:5] 5 4 3 2 1 #>  $ messy_list|a|2: chr \"green\" #>  $ messy_list|a|3: chr \"blue\" #>  $ messy_list|   : chr [1:26] \"a\" \"b\" \"c\" \"d\" ... messy_list |> list_iron(name_repair = 'unique') |> names() #> [1] \"messy_list|...1\" \"messy_list|a|1\"  \"messy_list|a|2\"  \"messy_list|a|3\"  #> [5] \"messy_list|...5\" messy_list |> list_iron(name_spec = '', name_repair = 'unique') |> names() #> [1] \"...1\" \"...2\" \"...3\" \"...4\" \"...5\" messy_list |> list_iron(name_spec = '{outer}', name_repair = 'unique') |> names() #> [1] \"messy_list...1\" \"messy_list...2\" \"messy_list...3\" \"messy_list...4\" #> [5] \"messy_list...5\""},{"path":"https://eauleaf.github.io/xlr/reference/paste_from_xl.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste data into Rstudio from a spreadsheet — paste_from_xl","title":"Paste data into Rstudio from a spreadsheet — paste_from_xl","text":"Imports spreadsheet data user's clipboard RStudio. Also, copies full file paths copied OS file navigation window. Imported data formats 1 2 ways. pasting console window, 'ctrl+alt+shift+v' insert tibble vector copied spreadsheet data. pasting text editor window, 'ctrl+alt+shift+v' insert expression produce spreadsheet data. set quick keys, use set_xlr_key_chords() pasting multiple spreadsheet rows, data imports tibble. pasting single spreadsheet row multiple columns, data imports vector. pasting folder file paths OS navigation window, data imports vector.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/paste_from_xl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste data into Rstudio from a spreadsheet — paste_from_xl","text":"","code":"paste_from_xl(has_fieldnames = NULL)"},{"path":"https://eauleaf.github.io/xlr/reference/paste_from_xl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste data into Rstudio from a spreadsheet — paste_from_xl","text":"has_fieldnames TRUE FALSE indicating whether field names present spreadsheet data copied. user supplies value, paste_from_xl() guesses looking clipboard data. function incorrectly guesses presence field names, just place T F function echoed console. has_fieldnames set either TRUE FALSE, data always imports tibble.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/paste_from_xl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste data into Rstudio from a spreadsheet — paste_from_xl","text":"** user copied single spreadsheet row column clipboard memory, returns vector. ** user copied one spreadsheet row column clipboard, returns tibble. ** user copied local file clipboard, returns string path file.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/paste_from_xl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Paste data into Rstudio from a spreadsheet — paste_from_xl","text":"set quick keys RStudio, run function: set_xlr_key_chords(). , set quick keys manually following RStudio instructions: https://support.posit.co/hc/en-us/articles/206382178-Customizing-Keyboard-Shortcuts---RStudio-IDE Windows, path copying pasting navigation window R requires Powershell script callable command prompt. (Sometimes Powershell might disabled.)","code":""},{"path":"https://eauleaf.github.io/xlr/reference/paste_from_xl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Paste data into Rstudio from a spreadsheet — paste_from_xl","text":"copying large quantity data spreadsheet, try reading data instead readxl::read_excel().","code":""},{"path":"https://eauleaf.github.io/xlr/reference/paste_from_xl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste data into Rstudio from a spreadsheet — paste_from_xl","text":"","code":"if(interactive()){  # Copy data from a spreadsheet into working memory by right-clicking # with your mouse and selecting 'copy', or by using 'ctrl + c'. # Paste the copied spreadsheet data into R by typing into the R console: (my_data <- paste_from_xl())  paste_from_xl()   }"},{"path":"https://eauleaf.github.io/xlr/reference/repeated.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag all values in a vector that occur more than once. — repeated","title":"Flag all values in a vector that occur more than once. — repeated","text":"Useful reviewing datasets unique values. similar duplicated(), marks repeated values TRUE rather just second observation thereafter. Treats NaN, Inf, NA like value. repeated(c(NULL, NULL, NULL, NaN, Inf, NA, NA)) returns c(FALSE, FALSE, TRUE, TRUE)","code":""},{"path":"https://eauleaf.github.io/xlr/reference/repeated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag all values in a vector that occur more than once. — repeated","text":"","code":"repeated(x, incomparables = FALSE, ...)"},{"path":"https://eauleaf.github.io/xlr/reference/repeated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag all values in a vector that occur more than once. — repeated","text":"x vector incomparables vector values compared. FALSE special value, meaning values can compared, may value accepted methods default; values coerced internally type x. ... passed duplicated()","code":""},{"path":"https://eauleaf.github.io/xlr/reference/repeated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag all values in a vector that occur more than once. — repeated","text":"logical vector length input","code":""},{"path":"https://eauleaf.github.io/xlr/reference/repeated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag all values in a vector that occur more than once. — repeated","text":"convenience function use dplyr::filter() make easy identify review repeated observations dataframe. function alias x %% x[duplicated(x)]. Filtering dataframe repeated values column 'x', dplyr::filter(.data, repeated(x)), performs task grouping variable selecting counts greater 1, dplyr::group_by(.data, x)  |> dplyr::filter(dplyr::n()>1), quicker easier remember. (Ideally repeated() written c++ included dplyr.)","code":""},{"path":"https://eauleaf.github.io/xlr/reference/repeated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag all values in a vector that occur more than once. — repeated","text":"","code":"repeated(c(1, 2, 3, 4, 5, 5, 5)) #> [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE repeated(c('A','A','B','C',5,5), incomparables = c('A')) #> [1] FALSE FALSE FALSE FALSE  TRUE  TRUE c(NA, NA, '', NULL, NULL, NULL) |> repeated() #> [1]  TRUE  TRUE FALSE  # Find all cars where 'qsec' is the same as another car's: mtcars |> dplyr::filter(repeated(qsec)) #>                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Merc 280C         17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Fiat X1-9         27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1  # For clarity, compare repeated() output to duplicated() output: mtcars |> dplyr::filter(repeated(wt)) #>                    mpg cyl  disp  hp drat   wt  qsec vs am gear carb #> Hornet Sportabout 18.7   8 360.0 175 3.15 3.44 17.02  0  0    3    2 #> Duster 360        14.3   8 360.0 245 3.21 3.57 15.84  0  0    3    4 #> Merc 280          19.2   6 167.6 123 3.92 3.44 18.30  1  0    4    4 #> Merc 280C         17.8   6 167.6 123 3.92 3.44 18.90  1  0    4    4 #> Maserati Bora     15.0   8 301.0 335 3.54 3.57 14.60  0  1    5    8 mtcars |> dplyr::filter(duplicated(wt)) #>                mpg cyl  disp  hp drat   wt qsec vs am gear carb #> Merc 280      19.2   6 167.6 123 3.92 3.44 18.3  1  0    4    4 #> Merc 280C     17.8   6 167.6 123 3.92 3.44 18.9  1  0    4    4 #> Maserati Bora 15.0   8 301.0 335 3.54 3.57 14.6  0  1    5    8  # To use dplyr::filter() on several variables, put a `,` for 'and', #  and use `|` for an 'or' statement, as in: mtcars |> dplyr::filter(repeated(qsec), repeated(wt)) #>                    mpg cyl  disp  hp drat   wt  qsec vs am gear carb #> Hornet Sportabout 18.7   8 360.0 175 3.15 3.44 17.02  0  0    3    2 #> Merc 280C         17.8   6 167.6 123 3.92 3.44 18.90  1  0    4    4 mtcars |> dplyr::filter(repeated(qsec) | repeated(wt)) #>                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360        14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 280          19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C         17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Fiat X1-9         27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Maserati Bora     15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8"},{"path":"https://eauleaf.github.io/xlr/reference/run_copy_for_xl.html","id":null,"dir":"Reference","previous_headings":"","what":"Addin function to call copy_for_xl() — run_copy_for_xl","title":"Addin function to call copy_for_xl() — run_copy_for_xl","text":"interactive use RStudio.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/run_copy_for_xl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Addin function to call copy_for_xl() — run_copy_for_xl","text":"","code":"run_copy_for_xl()"},{"path":"https://eauleaf.github.io/xlr/reference/run_copy_for_xl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Addin function to call copy_for_xl() — run_copy_for_xl","text":"","code":"if (FALSE) { # Highlight a text item below and press key-chord `ctrl + alt + shift + c`. # To implement the key-chord in RStudio. Run [set_xlr_key_chords()]. # Note that setting [set_xlr_key_chords()] will restart the R session.  head(iris) colours() letters dplyr::bind_cols(letters, LETTERS) letters |> rlang::set_names(LETTERS)  # ragged list embedded tibbles should throw an error enlist(head(iris),letters)  }"},{"path":"https://eauleaf.github.io/xlr/reference/run_enscript.html","id":null,"dir":"Reference","previous_headings":"","what":"Addin function to call enscript() — run_enscript","title":"Addin function to call enscript() — run_enscript","text":"Requires RStudio","code":""},{"path":"https://eauleaf.github.io/xlr/reference/run_enscript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Addin function to call enscript() — run_enscript","text":"","code":"run_enscript()"},{"path":"https://eauleaf.github.io/xlr/reference/run_enscript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Addin function to call enscript() — run_enscript","text":"void","code":""},{"path":"https://eauleaf.github.io/xlr/reference/run_enscript.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Addin function to call enscript() — run_enscript","text":"","code":"if (FALSE) { # Highlight each text item below and press key-chord `ctrl + alt + shift + n`. # To implement quick key-chord. Run {.fn set_xlr_key_chords}.  (1:5 * 10) rep(\"🎊🌈\",3) dplyr::starwars |> head() letters }"},{"path":"https://eauleaf.github.io/xlr/reference/run_paste_from_xl.html","id":null,"dir":"Reference","previous_headings":"","what":"Rstudio addin function to call paste_from_xl() — run_paste_from_xl","title":"Rstudio addin function to call paste_from_xl() — run_paste_from_xl","text":"key-chord ctrl+alt+shift+v.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/run_paste_from_xl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rstudio addin function to call paste_from_xl() — run_paste_from_xl","text":"","code":"run_paste_from_xl()"},{"path":"https://eauleaf.github.io/xlr/reference/run_paste_from_xl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rstudio addin function to call paste_from_xl() — run_paste_from_xl","text":"void","code":""},{"path":"https://eauleaf.github.io/xlr/reference/run_paste_from_xl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rstudio addin function to call paste_from_xl() — run_paste_from_xl","text":"","code":"if (FALSE)  run_paste_from_xl()"},{"path":"https://eauleaf.github.io/xlr/reference/run_xl.html","id":null,"dir":"Reference","previous_headings":"","what":"Addin function to call xl() — run_xl","title":"Addin function to call xl() — run_xl","text":"Requires RStudio","code":""},{"path":"https://eauleaf.github.io/xlr/reference/run_xl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Addin function to call xl() — run_xl","text":"","code":"run_xl()"},{"path":"https://eauleaf.github.io/xlr/reference/run_xl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Addin function to call xl() — run_xl","text":"void","code":""},{"path":"https://eauleaf.github.io/xlr/reference/run_xl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Addin function to call xl() — run_xl","text":"","code":"if (FALSE) { # Highlight each item below and press key-chord `ctrl + alt + shift + l`. # To implement the quick-keys. Run {.fn set_xlr_key_chords}.  mtcars (1:5 * 10) rep(\"🎊🌈\",3) dplyr::starwars |> head() letters }"},{"path":"https://eauleaf.github.io/xlr/reference/scrub_tabnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Conform names to spreadsheet workbook standards — scrub_tabnames","title":"Conform names to spreadsheet workbook standards — scrub_tabnames","text":"scrub_tabnames() preserves much original tabnames possible ensuring tabname unique contains characters permissible spreadsheet tab names","code":""},{"path":"https://eauleaf.github.io/xlr/reference/scrub_tabnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conform names to spreadsheet workbook standards — scrub_tabnames","text":"","code":"scrub_tabnames(   tabnames,   max_width = 31,   truncate_side = c(\"right\", \"left\", \"center\"),   paste_side = c(\"right\", \"left\"),   sep = \".\",   pad = \".\",   quiet = FALSE )"},{"path":"https://eauleaf.github.io/xlr/reference/scrub_tabnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conform names to spreadsheet workbook standards — scrub_tabnames","text":"tabnames strings: character vector names max_width integerish 0 31: Default 31 characters; longer names cause Excel export fail. truncate_side 'right', 'left', 'center': describes side long tabname want snip excess characters paste_side 'right' 'left': describing side tab name want paste characters , required sep chars: pasting characters tab name, character want use separate name unique prefix/suffix; can several characters like '...', forbidden characters described details pad char: pasting characters tab name, character want use pad numbers align, (e.g. '0' '001' '.' '..1' 3 digits differentiation necessary). Must least 1 character longer. Can space ' ', forbidden characters described details quiet bool: turn warnings prefer quiet = TRUE","code":""},{"path":"https://eauleaf.github.io/xlr/reference/scrub_tabnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conform names to spreadsheet workbook standards — scrub_tabnames","text":"character vector names suitable Excel Librecalc tab/sheet names","code":""},{"path":"https://eauleaf.github.io/xlr/reference/scrub_tabnames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conform names to spreadsheet workbook standards — scrub_tabnames","text":"Replaces: characters: /\\: : - characters: ?*&$ : # characters: [< : ( characters: ]> : ) tabnames single quote double quote: ' \" backtick ` word 'history' tabname, 'hist' preserving capitalization names greater 31 characters truncated characters duplicate sheetnames numbered versions name make name within group unique","code":""},{"path":"https://eauleaf.github.io/xlr/reference/scrub_tabnames.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conform names to spreadsheet workbook standards — scrub_tabnames","text":"https://help.libreoffice.org/latest//text/scalc/guide/rename_table.html https://support.microsoft.com/en-us/office/rename--worksheet-3f1f7148-ee83-404d-8ef0-9ff99fbad1f9 https://colinfay./writing-r-extensions/creating-r-packages.html","code":""},{"path":"https://eauleaf.github.io/xlr/reference/scrub_tabnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conform names to spreadsheet workbook standards — scrub_tabnames","text":"","code":"some_tabnames <- c('\\\\:blue/:', 'red', 'gr?*een///////', '[]', '[orange]','', NA) scrub_tabnames(some_tabnames) #> ! Sheet names should not contain:  `\\` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `/` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `:` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `*` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `?` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `[` #> → Replacing forbidden character with:  `(` #> ! Sheet names should not contain:  `]` #> → Replacing forbidden character with:  `)` #> ! Duplicate or empty names exist. Numbering within each group ...  #> [1] \"--blue--\"       \"red\"            \"gr##een-------\" \"()\"             #> [5] \"(orange)\"       \".1\"             \"NA\"             c('history', 'Entire History of the Universe') |> scrub_tabnames() #> ! Sheet names should not contain:  `the word 'history'` #> → Replacing forbidden character with:  `hist` #> [1] \"hist\"                        \"Entire Hist of the Universe\" c('\\\\/:[]?*', '\\\\?:*/[]', '~!@#$%^&()-_=+{}|;:,<.> ') |> scrub_tabnames() #> ! Sheet names should not contain:  `\\` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `/` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `:` #> → Replacing forbidden character with:  `-` #> ! Sheet names should not contain:  `*` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `?` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `?` #> → Replacing forbidden character with:  `#` #> ! Sheet names should not contain:  `[` #> → Replacing forbidden character with:  `(` #> ! Sheet names should not contain:  `]` #> → Replacing forbidden character with:  `)` #> ! Sheet names should not contain:  `<` #> → Replacing forbidden character with:  `(` #> ! Sheet names should not contain:  `>` #> → Replacing forbidden character with:  `)` #> [1] \"---()##\"                  \"-#-#-()\"                  #> [3] \"~!@#$%^#()-_=+{}|;-,(.) \" names(datasets::precip) |> scrub_tabnames(max_width = 5) #> ! Duplicate or empty names exist. Numbering within each group ...  #>  [1] \"Mobil\" \"Junea\" \"Phoen\" \"Littl\" \"Los A\" \"Sacra\" \"San F\" \"Denve\" \"Hartf\" #> [10] \"Wilmi\" \"Washi\" \"Jac.1\" \"Miami\" \"Atl.1\" \"Honol\" \"Boise\" \"Chica\" \"Peori\" #> [19] \"India\" \"Des M\" \"Wichi\" \"Louis\" \"New O\" \"Por.1\" \"Balti\" \"Bosto\" \"Detro\" #> [28] \"Sault\" \"Dulut\" \"Minne\" \"Jac.2\" \"Kansa\" \"St Lo\" \"Great\" \"Omaha\" \"Reno\"  #> [37] \"Conco\" \"Atl.2\" \"Albuq\" \"Alban\" \"Buffa\" \"New Y\" \"Cha.1\" \"Ralei\" \"Bisma\" #> [46] \"Cinci\" \"Cleve\" \"Col.1\" \"Oklah\" \"Por.2\" \"Phila\" \"Pitts\" \"Provi\" \"Col.2\" #> [55] \"Sioux\" \"Memph\" \"Nashv\" \"Dalla\" \"El Pa\" \"Houst\" \"Salt \" \"Burli\" \"Norfo\" #> [64] \"Richm\" \"Seatt\" \"Spoka\" \"Cha.2\" \"Milwa\" \"Cheye\" \"San J\" rep('', 15) |> scrub_tabnames(max_width = 0, sep = '..', pad = '.') #> ! The minimum width must be greater than the number of characters required #>         to differentiate possible duplicated tabnames plus the characters in `sep`. #>          #> Setting the tabname character width to 4. #> ! Duplicate or empty names exist. Numbering within each group ...  #>  [1] \"...1\" \"...2\" \"...3\" \"...4\" \"...5\" \"...6\" \"...7\" \"...8\" \"...9\" \"..10\" #> [11] \"..11\" \"..12\" \"..13\" \"..14\" \"..15\""},{"path":"https://eauleaf.github.io/xlr/reference/set_xlr_key_chords.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets xlr key-chords — set_xlr_key_chords","title":"Sets xlr key-chords — set_xlr_key_chords","text":"Sets key-chord \"ctrl + alt + shift + v\" RStudio auto-run paste_from_xl(). Sets key-chord \"ctrl + alt + shift + c\" RStudio auto-run copy_for_xl(). Sets key-chord \"ctrl + alt + shift + n\" RStudio auto-run enscript(). Sets key-chord \"ctrl + alt + shift + l\" RStudio auto-run xl().","code":""},{"path":"https://eauleaf.github.io/xlr/reference/set_xlr_key_chords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets xlr key-chords — set_xlr_key_chords","text":"","code":"set_xlr_key_chords()"},{"path":"https://eauleaf.github.io/xlr/reference/set_xlr_key_chords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sets xlr key-chords — set_xlr_key_chords","text":"enable quick keys running set_xlr_key_chords(), must close re-launch RStudio. set quick-keys manually RStudio, follow instructions Posit: https://support.posit.co/hc/en-us/articles/206382178-Customizing-Keyboard-Shortcuts---RStudio-IDE","code":""},{"path":"https://eauleaf.github.io/xlr/reference/set_xlr_key_chords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets xlr key-chords — set_xlr_key_chords","text":"","code":"if (FALSE)  set_xlr_key_chords()"},{"path":"https://eauleaf.github.io/xlr/reference/splitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits, with auto-naming, a dataframe into a list of dataframes — splitter","title":"Splits, with auto-naming, a dataframe into a list of dataframes — splitter","text":"Similar dplyr::group_split() base::split(), :","code":""},{"path":"https://eauleaf.github.io/xlr/reference/splitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits, with auto-naming, a dataframe into a list of dataframes — splitter","text":"","code":"splitter(.data, ..., .sep = \"|\")"},{"path":"https://eauleaf.github.io/xlr/reference/splitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits, with auto-naming, a dataframe into a list of dataframes — splitter","text":".data dataframe ... specified columns split .sep character ","code":""},{"path":"https://eauleaf.github.io/xlr/reference/splitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits, with auto-naming, a dataframe into a list of dataframes — splitter","text":"named list dataframes","code":""},{"path":"https://eauleaf.github.io/xlr/reference/splitter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Splits, with auto-naming, a dataframe into a list of dataframes — splitter","text":"takes dataframes auto-names list output dataframes splits based column names, column numbers, selection features dplyr::select() user specifies columns split , splitter() split groupings dplyr::group_by() create dataframe groups, preserves dataframe groups outputs","code":""},{"path":"https://eauleaf.github.io/xlr/reference/splitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splits, with auto-naming, a dataframe into a list of dataframes — splitter","text":"","code":"# splits by column names mtcars |> splitter(cyl) #> $`4` #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>  #> $`6` #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #>  #> $`8` #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #>  mtcars |> splitter('cyl') #> $`4` #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>  #> $`6` #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #>  #> $`8` #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #>  mtcars |> splitter(gear, cyl) #> $`3|4` #>                mpg cyl  disp hp drat    wt  qsec vs am gear carb #> Toyota Corona 21.5   4 120.1 97  3.7 2.465 20.01  1  0    3    1 #>  #> $`3|6` #>                 mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Valiant        18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 #>  #> $`3|8` #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #>  #> $`4|4` #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>  #> $`4|6` #>                mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4     21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Merc 280      19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C     17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #>  #> $`5|4` #>                mpg cyl  disp  hp drat    wt qsec vs am gear carb #> Porsche 914-2 26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2 #> Lotus Europa  30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2 #>  #> $`5|6` #>               mpg cyl disp  hp drat   wt qsec vs am gear carb #> Ferrari Dino 19.7   6  145 175 3.62 2.77 15.5  0  1    5    6 #>  #> $`5|8` #>                 mpg cyl disp  hp drat   wt qsec vs am gear carb #> Ford Pantera L 15.8   8  351 264 4.22 3.17 14.5  0  1    5    4 #> Maserati Bora  15.0   8  301 335 3.54 3.57 14.6  0  1    5    8 #>   # or a column number mtcars |> splitter(2) #> $`4` #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>  #> $`6` #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #>  #> $`8` #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #>  mtcars |> splitter(2, 10) #> $`4|3` #>                mpg cyl  disp hp drat    wt  qsec vs am gear carb #> Toyota Corona 21.5   4 120.1 97  3.7 2.465 20.01  1  0    3    1 #>  #> $`4|4` #>                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>  #> $`4|5` #>                mpg cyl  disp  hp drat    wt qsec vs am gear carb #> Porsche 914-2 26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2 #> Lotus Europa  30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2 #>  #> $`6|3` #>                 mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Valiant        18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 #>  #> $`6|4` #>                mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4     21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Merc 280      19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C     17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #>  #> $`6|5` #>               mpg cyl disp  hp drat   wt qsec vs am gear carb #> Ferrari Dino 19.7   6  145 175 3.62 2.77 15.5  0  1    5    6 #>  #> $`8|3` #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #>  #> $`8|5` #>                 mpg cyl disp  hp drat   wt qsec vs am gear carb #> Ford Pantera L 15.8   8  351 264 4.22 3.17 14.5  0  1    5    4 #> Maserati Bora  15.0   8  301 335 3.54 3.57 14.6  0  1    5    8 #>   # splits by `dplyr` grouped variables if no split info is passed as an argument mtcars |> dplyr::group_by(cyl) |> splitter() #> $`4` #> # A tibble: 11 × 11 #> # Groups:   cyl [1] #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1 #>  2  24.4     4 147.     62  3.69  3.19  20       1     0     4     2 #>  3  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2 #>  4  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #>  5  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #>  6  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #>  7  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1 #>  8  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #>  9  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #> 10  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #> 11  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2 #>  #> $`6` #> # A tibble: 7 × 11 #> # Groups:   cyl [1] #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #> 3  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #> 4  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #> 5  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> 6  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4 #> 7  19.7     6  145    175  3.62  2.77  15.5     0     1     5     6 #>  #> $`8` #> # A tibble: 14 × 11 #> # Groups:   cyl [1] #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  2  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  3  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3 #>  4  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3 #>  5  15.2     8  276.   180  3.07  3.78  18       0     0     3     3 #>  6  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4 #>  7  10.4     8  460    215  3     5.42  17.8     0     0     3     4 #>  8  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4 #>  9  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2 #> 10  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2 #> 11  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4 #> 12  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2 #> 13  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4 #> 14  15       8  301    335  3.54  3.57  14.6     0     1     5     8 #>   # if there are already groups, but a split argument is passed in, #  splitter ignores the `dplyr` groupings as a split variable and #  preserves the `dplyr` groups in the result mtcars |> dplyr::group_by(cyl) |> splitter(gear) #> $`3` #> # A tibble: 15 × 11 #> # Groups:   cyl [3] #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  2  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  3  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  4  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  5  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3 #>  6  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3 #>  7  15.2     8  276.   180  3.07  3.78  18       0     0     3     3 #>  8  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4 #>  9  10.4     8  460    215  3     5.42  17.8     0     0     3     4 #> 10  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4 #> 11  21.5     4  120.    97  3.7   2.46  20.0     1     0     3     1 #> 12  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2 #> 13  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2 #> 14  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4 #> 15  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2 #>  #> $`4` #> # A tibble: 12 × 11 #> # Groups:   cyl [2] #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6 160     110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6 160     110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1 #>  4  24.4     4 147.     62  3.69  3.19  20       1     0     4     2 #>  5  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2 #>  6  19.2     6 168.    123  3.92  3.44  18.3     1     0     4     4 #>  7  17.8     6 168.    123  3.92  3.44  18.9     1     0     4     4 #>  8  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #>  9  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #> 10  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1 #> 11  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1 #> 12  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2 #>  #> $`5` #> # A tibble: 5 × 11 #> # Groups:   cyl [3] #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  26       4 120.     91  4.43  2.14  16.7     0     1     5     2 #> 2  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2 #> 3  15.8     8 351     264  4.22  3.17  14.5     0     1     5     4 #> 4  19.7     6 145     175  3.62  2.77  15.5     0     1     5     6 #> 5  15       8 301     335  3.54  3.57  14.6     0     1     5     8 #>"},{"path":"https://eauleaf.github.io/xlr/reference/sys_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a file via the OS default app — sys_open","title":"Open a file via the OS default app — sys_open","text":"Open files, folders, URLs operating system default application.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/sys_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a file via the OS default app — sys_open","text":"","code":"sys_open(..., .quiet = TRUE)"},{"path":"https://eauleaf.github.io/xlr/reference/sys_open.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a file via the OS default app — sys_open","text":"... path strings files folder want open inputs can combination lists, vectors, comma-separated inputs input opens current working folder location paths automatically expanded using normalizePath() .quiet TRUE, echo unix system errors warnings console","code":""},{"path":"https://eauleaf.github.io/xlr/reference/sys_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open a file via the OS default app — sys_open","text":"character vector named paths","code":""},{"path":"https://eauleaf.github.io/xlr/reference/sys_open.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open a file via the OS default app — sys_open","text":"able open file sys_open(), right-click file make sure operating system default application assigned file type, double-clicking file opens default application.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/sys_open.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open a file via the OS default app — sys_open","text":"","code":"if (FALSE) { # open current working directory sys_open('.') sys_open(here::here()) sys_open()  # open parent of current working directory sys_open('..')  # open user home dir sys_open('~')  # open system dir sys_open('/')  # open the first 3 files or folders in the current directory list.files(here::here())[1:3] |> sys_open()  # open the current temp directory sys_open(tempdir())  # also opens a browser if sent a path that begins with 'https://' # or 'http://' (or contains '.com/','.org/', etc. or ends in them but without forward slash) sys_open('google.org')  # last value can be empty, which will open the working directory sys_open('google.org', )  }"},{"path":"https://eauleaf.github.io/xlr/reference/uniquify_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Glue sequential padded numbers within each group of repeated names — uniquify_names","title":"Glue sequential padded numbers within each group of repeated names — uniquify_names","text":"Note: tabname cleaning parameter checks already done scrub_tabnames passing args. function recursive can call forever width, sep, pad checked advance.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/uniquify_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glue sequential padded numbers within each group of repeated names — uniquify_names","text":"","code":"uniquify_names(   tabnames,   truncate_side = \"right\",   paste_side = \"right\",   width = 31,   sep = \"->\",   pad = \".\",   ellipsis = \"\",   quiet = FALSE )"},{"path":"https://eauleaf.github.io/xlr/reference/uniquify_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glue sequential padded numbers within each group of repeated names — uniquify_names","text":"tabnames character vector tab/sheet names truncate_side snip excess tabnames 'left', 'right', 'center' paste_side 'left', 'right' side tabnames tack rownumbers width number chars allowed tab/sheet name sep tabname text rownumber separator pad padding characters used left side group rownumbering ellipsis replacement characters truncation quiet quiet warning reports","code":""},{"path":"https://eauleaf.github.io/xlr/reference/uniquify_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glue sequential padded numbers within each group of repeated names — uniquify_names","text":"vector unique tabnames","code":""},{"path":"https://eauleaf.github.io/xlr/reference/uniquify_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glue sequential padded numbers within each group of repeated names — uniquify_names","text":"","code":"tabnames = c('', NULL, NULL, NA, NA, 'a', 'a', 'a', 'b', 'b', 'c', rep('d',11)) uniquify_names(tabnames) #> ! Duplicate or empty names exist. Numbering within each group ...  #>  [1] \"->1\"   \"NA->1\" \"NA->2\" \"a->1\"  \"a->2\"  \"a->3\"  \"b->1\"  \"b->2\"  \"c\"     #> [10] \"d->.1\" \"d->.2\" \"d->.3\" \"d->.4\" \"d->.5\" \"d->.6\" \"d->.7\" \"d->.8\" \"d->.9\" #> [19] \"d->10\" \"d->11\" uniquify_names(tabnames = tabnames, paste_side = 'left' , sep = '|') #> ! Duplicate or empty names exist. Numbering within each group ...  #>  [1] \"1|\"   \"1|NA\" \"2|NA\" \"1|a\"  \"2|a\"  \"3|a\"  \"1|b\"  \"2|b\"  \"c\"    \".1|d\" #> [11] \".2|d\" \".3|d\" \".4|d\" \".5|d\" \".6|d\" \".7|d\" \".8|d\" \".9|d\" \"10|d\" \"11|d\""},{"path":"https://eauleaf.github.io/xlr/reference/xl.html","id":null,"dir":"Reference","previous_headings":"","what":"View an R data objects in a Libreoffice or Excel workbook — xl","title":"View an R data objects in a Libreoffice or Excel workbook — xl","text":"Provides output datasets view user's default spreadsheet program.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/xl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View an R data objects in a Libreoffice or Excel workbook — xl","text":"","code":"xl(   ...,   .path = NULL,   .open = TRUE,   .quiet = TRUE,   .sheet_titles = stringr::str_to_title,   .dataframe_spec = NULL,   .tabname_spec = list(sep = \".\", pad = \".\", name_spec = \"{inner}\"),   .workbook_spec = list(asTable = TRUE, zoom = 70, withFilter = TRUE),   .return = list(\"workbook\", \"savepath\", \"tibbles\", \"boolean\", \"all\") )"},{"path":"https://eauleaf.github.io/xlr/reference/xl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View an R data objects in a Libreoffice or Excel workbook — xl","text":"... dataframe, list dataframes, inputs coercible one dataframes. .path Optional path save copy workbook output. Uses ::() savepath completion. .path end '.xlsx', automatically adds suffix. .path specified, workbook saved momentarily auto-named temp file. Always creates specified directory location. .open FALSE, workbook open written. .quiet FALSE, echoes function messages. .sheet_titles NULL, character vector length number spreadsheets, purrr-style function formula apply default input names. default function: stringr::str_to_title(). .dataframe_spec NULL (default), purrr-style function apply across dataframes; e.g. ~janitor::clean_names(., case = 'title')) janitor::clean_names titlecase snakecase fieldnames. .tabname_spec list allows user define tab labeling arguments: sep = \".\", pad = \".\", name_spec = \"inner\" .workbook_spec list arguments pass openxlsx::buildWorkbook(), e.g. list(asTable = TRUE, orientation = 'landscape', zoom = 100, startRow = 7) .return return (invisibly) one 'workbook' (default), 'savepath', 'tibbles', 'boolean' workbook write success/failure. '' returns possibilities named list.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/xl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View an R data objects in a Libreoffice or Excel workbook — xl","text":"side-effect, workbook spreadsheets, primary output function. direct-return output determined input parameter .return denoting whether return openxlsx workbook-object, list input data cast tibbles, save path. output returned invisibly.","code":""},{"path":"https://eauleaf.github.io/xlr/reference/xl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View an R data objects in a Libreoffice or Excel workbook — xl","text":"use quick keys, function set_xlr_key_chords() assign ctrl + alt + shift + l function xl(). quick keys allow open spreadsheet highlighting expression variable within RStudio text editor, pressing 3 control keys ctrl + alt + shift well letter L 'launch' spreadsheet.","code":""},{"path":[]},{"path":"https://eauleaf.github.io/xlr/reference/xl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View an R data objects in a Libreoffice or Excel workbook — xl","text":"","code":"if (FALSE) { xl('hi') xl(mtcars, iris) xl(iris, iris) xl(mtcars, iris, .workbook_spec = list(asTable = FALSE, orientation = 'landscape', name = NULL)) xl(mtcars, .sheet_titles = NULL) iris |> splitter(Species) |> xl(.workbook_spec = list(startRow = c(6,4,2), zoom = 110)) iris |> splitter(Species) |> xl(.sheet_titles=c('SMALL',NA,'LARGE')) dplyr::starwars |> xl() dplyr::starwars |> splitter(eye_color) |> xl(.sheet_titles = toupper) }"},{"path":"https://eauleaf.github.io/xlr/reference/xlr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"xlr: Tools for working between Excel/Libreoffice and R — xlr-package","title":"xlr: Tools for working between Excel/Libreoffice and R — xlr-package","text":"Move data quickly spreadsheets R.","code":""},{"path":[]},{"path":"https://eauleaf.github.io/xlr/reference/xlr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"xlr: Tools for working between Excel/Libreoffice and R — xlr-package","text":"Maintainer:  Eauleaf eauleaf@gmail.com","code":""}]
